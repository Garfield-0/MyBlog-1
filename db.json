{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/img/favicon.ico","path":"img/favicon.ico","modified":1,"renderable":0},{"_id":"themes/yilia/source/main.0cf68a.css","path":"main.0cf68a.css","modified":1,"renderable":1},{"_id":"themes/yilia/source/slider.e37972.js","path":"slider.e37972.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/main.0cf68a.js","path":"main.0cf68a.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/mobile.992cbe.js","path":"mobile.992cbe.js","modified":1,"renderable":1},{"_id":"source/img/app.png","path":"img/app.png","modified":1,"renderable":0},{"_id":"source/img/wechat.png","path":"img/wechat.png","modified":1,"renderable":0},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","path":"fonts/default-skin.b257fa.svg","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.45d7ee.svg","path":"fonts/iconfont.45d7ee.svg","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.16acc2.ttf","path":"fonts/iconfont.16acc2.ttf","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.8c627f.woff","path":"fonts/iconfont.8c627f.woff","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.b322fa.eot","path":"fonts/iconfont.b322fa.eot","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","path":"fonts/tooltip.4004ff.svg","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/default-skin.png","path":"img/default-skin.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/preloader.gif","path":"img/preloader.gif","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":1,"renderable":1}],"Cache":[{"_id":"themes/yilia/.babelrc","hash":"db600d40e93e6d8023737a65d58d3be7370e5e30","modified":1535781879989},{"_id":"themes/yilia/.editorconfig","hash":"daaa8757fac18f8735fadd0a37a42c06f421ca14","modified":1535781879990},{"_id":"themes/yilia/.eslintignore","hash":"ed9d8911ca08c3dd5072c48dd0be4d06f8897730","modified":1535781879990},{"_id":"themes/yilia/.eslintrc.js","hash":"303d25adf02ad65720e537a16a4a137d14bb755f","modified":1535781879990},{"_id":"themes/yilia/.gitattributes","hash":"758cfbecfa7919e99abddf3297f37cde7e3d8d4e","modified":1535781879991},{"_id":"themes/yilia/.gitignore","hash":"d5fc575329853ff620b50fc62ad4b18fa09a308a","modified":1535781879991},{"_id":"themes/yilia/README.md","hash":"1bf755806af9d8874bd22e1abbdaaa24328ef4dc","modified":1535781879992},{"_id":"themes/yilia/_config.yml","hash":"ed1183b1b69779f00898c881cd6af3e27473c8a7","modified":1535795096463},{"_id":"themes/yilia/_config.yml.bak","hash":"0d2c3ac67b32b8228c256104ccc431c918eead34","modified":1535781879992},{"_id":"themes/yilia/package.json","hash":"ee6aa61f1cb89fd549e3e087c0232207a9c9ee30","modified":1535781880014},{"_id":"themes/yilia/webpack.config.js","hash":"da7657347109ddb4ab8602b219778117254677fe","modified":1535781880055},{"_id":"source/_posts/2018-10-01-HEXO-搭建自己的免费博客.md","hash":"5f13106e06b65a01f6f149f5434b90bcbd252ffe","modified":1538400596098},{"_id":"source/_posts/2018-10-01-VUE-关于组建间传值的问题.md","hash":"a9108c5a8775470604e84e9b7a47114c3d6fb62d","modified":1538399331257},{"_id":"source/_posts/hello-world.md","hash":"8d0ba4c679791ae5b4624278b4ca77fbb8e1c1af","modified":1538395350642},{"_id":"source/_posts/为什么要写博客.md","hash":"529a2fea23b149d780f9cdaba524cd18d6521218","modified":1535791420998},{"_id":"source/img/favicon.ico","hash":"f5b495b86baf7731a34b6e63c694200834f6eae2","modified":1534516804776},{"_id":"themes/yilia/.git/COMMIT_EDITMSG","hash":"43b8f8de0a12659fbe7dca6f0451eee0e5b12e81","modified":1535795129079},{"_id":"themes/yilia/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1535781879967},{"_id":"themes/yilia/.git/config","hash":"3e71fc48371fa118827dd44abf0ff683bf0307be","modified":1535781879973},{"_id":"themes/yilia/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1535781865132},{"_id":"themes/yilia/.git/index","hash":"fe64773a9352a6da5df59be30058305e0883be81","modified":1535795129032},{"_id":"themes/yilia/.git/packed-refs","hash":"76b1aa9479dd3de329935b6d94a6624c5f716d23","modified":1535781879962},{"_id":"themes/yilia/languages/default.yml","hash":"f26a34a7983d4bc17c65c7f0f14da598e62ce66d","modified":1535781879993},{"_id":"themes/yilia/languages/fr.yml","hash":"b4be1c1592a72012e48df2b3ec41cc9685573e50","modified":1535781879994},{"_id":"themes/yilia/languages/nl.yml","hash":"3d82ec703d0b3287739d7cb4750a715ae83bfcb3","modified":1535781879994},{"_id":"themes/yilia/languages/no.yml","hash":"ddf2035e920a5ecb9076138c184257d9f51896a7","modified":1535781879994},{"_id":"themes/yilia/languages/ru.yml","hash":"2a476b4c6e04900914c81378941640ac5d58a1f0","modified":1535781879995},{"_id":"themes/yilia/languages/zh-CN.yml","hash":"b057f389c6713010f97d461e48ec959b0b6f3b44","modified":1535781879995},{"_id":"themes/yilia/languages/zh-tw.yml","hash":"f5f0ca88185da7a8457760d84bf221781473bd7c","modified":1535781879996},{"_id":"themes/yilia/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1535781880010},{"_id":"themes/yilia/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1535781880011},{"_id":"themes/yilia/layout/index.ejs","hash":"ec498c6c0606acde997ce195dad97b267418d980","modified":1535781880011},{"_id":"themes/yilia/layout/layout.ejs","hash":"b471ab706d48e0be3f783eab1c94bf5878ef5a94","modified":1535781880012},{"_id":"themes/yilia/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1535781880012},{"_id":"themes/yilia/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1535781880013},{"_id":"themes/yilia/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1535781880013},{"_id":"themes/yilia/source/main.0cf68a.css","hash":"ddf6e2c6b953c2c59a3c271e6070010a4cc81cf9","modified":1535781880050},{"_id":"themes/yilia/source/slider.e37972.js","hash":"ce5eac88301fe4f2fce0fb6203adfd58eb8313ac","modified":1535781880054},{"_id":"themes/yilia/source-src/css.ejs","hash":"cf7eab48d626433120d1ef9697f719a359817018","modified":1535781880014},{"_id":"themes/yilia/source-src/script.ejs","hash":"28abac2426761d7e715b38aadd86ce6549c8ae77","modified":1535781880043},{"_id":"themes/yilia/layout/_partial/toc.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1535781880009},{"_id":"themes/yilia/source/main.0cf68a.js","hash":"283ae27ea37ac3e0e45b2e05c2482a4c594b9c25","modified":1535781880051},{"_id":"themes/yilia/source/mobile.992cbe.js","hash":"1801ef448909ea23c0a48e9d63b80d0cfd5534ce","modified":1535781880053},{"_id":"source/img/app.png","hash":"07d41b9d40eba89d2d1238565e6e80c43c756274","modified":1534516804777},{"_id":"source/img/wechat.png","hash":"60c19f28c701aad542131759788bd673d3b9f7a0","modified":1535791526996},{"_id":"themes/yilia/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1535781865133},{"_id":"themes/yilia/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1535781865134},{"_id":"themes/yilia/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1535781865135},{"_id":"themes/yilia/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1535781865136},{"_id":"themes/yilia/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1535781865135},{"_id":"themes/yilia/.git/hooks/pre-commit.sample","hash":"33729ad4ce51acda35094e581e4088f3167a0af8","modified":1535781865141},{"_id":"themes/yilia/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1535781865141},{"_id":"themes/yilia/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1535781865142},{"_id":"themes/yilia/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1535781865142},{"_id":"themes/yilia/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1535781865143},{"_id":"themes/yilia/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1535781865143},{"_id":"themes/yilia/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1535781865144},{"_id":"themes/yilia/.git/logs/HEAD","hash":"0f1913b4633212d0ebe070f4c90d5cc6ca974c31","modified":1535795129126},{"_id":"themes/yilia/layout/_partial/after-footer.ejs","hash":"c70f367f54064a441e574c913f5e0ea121d0f899","modified":1535781879997},{"_id":"themes/yilia/layout/_partial/archive-post.ejs","hash":"edc0154b30a4127acda10297bec6aacf754b4ac4","modified":1535781879997},{"_id":"themes/yilia/layout/_partial/archive.ejs","hash":"a4eacc2bc1278095a0ef99f904b0634c78f980eb","modified":1535781879998},{"_id":"themes/yilia/layout/_partial/article.ejs","hash":"8dea8f5f93a60185439b330b0f1d1649a6ab4bd0","modified":1535781879998},{"_id":"themes/yilia/layout/_partial/aside.ejs","hash":"751e5deab5365348be5243688b419c82d337ab9a","modified":1535781879999},{"_id":"themes/yilia/layout/_partial/baidu-analytics.ejs","hash":"155327c23607f69989b58845f24d842a54e504b8","modified":1535781879999},{"_id":"themes/yilia/layout/_partial/css.ejs","hash":"236f8a377b2e4e35754319c3029bcd4a4115431d","modified":1535781880000},{"_id":"themes/yilia/layout/_partial/footer.ejs","hash":"871f81cacd5d41cb2eb001cd56254217a857dc2f","modified":1535781880000},{"_id":"themes/yilia/layout/_partial/google-analytics.ejs","hash":"1ccc627d7697e68fddc367c73ac09920457e5b35","modified":1535781880001},{"_id":"themes/yilia/layout/_partial/head.ejs","hash":"12ca7d8dba56bc767b9309dda9526dcbaffc1614","modified":1535781880001},{"_id":"themes/yilia/layout/_partial/header.ejs","hash":"b69855e07b65117769adc515cb64b803932068c9","modified":1535781880002},{"_id":"themes/yilia/layout/_partial/left-col.ejs","hash":"fb1b8457b9eb15b55da1bf7b133e12c375dd26f8","modified":1535781880002},{"_id":"themes/yilia/layout/_partial/mathjax.ejs","hash":"11550a418921d330e6553be0569a94ab5a217967","modified":1535781880002},{"_id":"themes/yilia/layout/_partial/mobile-nav.ejs","hash":"ccec1fc70f021cb50ac85b524e7949878ab93a18","modified":1535781880003},{"_id":"themes/yilia/layout/_partial/tools.ejs","hash":"0ffcb251b79e8a920c9b4cb6bb7a96a808816165","modified":1535781880010},{"_id":"themes/yilia/layout/_partial/viewer.ejs","hash":"cc1c39903aed0a0601d104238d2bbd13ad2a36f3","modified":1535781880010},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1535781880044},{"_id":"themes/yilia/source/fonts/iconfont.45d7ee.svg","hash":"75767c904d483d9b93469afb6b92bb6bdface639","modified":1535781880045},{"_id":"themes/yilia/source/fonts/iconfont.16acc2.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1535781880045},{"_id":"themes/yilia/source/fonts/iconfont.8c627f.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1535781880046},{"_id":"themes/yilia/source/fonts/iconfont.b322fa.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1535781880047},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1535781880047},{"_id":"themes/yilia/source/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1535781880048},{"_id":"themes/yilia/source/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1535781880049},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1535781880049},{"_id":"themes/yilia/source-src/css/_core.scss","hash":"29ba600e98ed55f7af4ade8038272c84cba21188","modified":1535781880015},{"_id":"themes/yilia/source-src/css/_function.scss","hash":"ce227b6f5a9af194fd5d455200630f32c05e151f","modified":1535781880016},{"_id":"themes/yilia/source-src/css/archive.scss","hash":"d6a7dd88404b383b5b94e4c7ec675a410c41f3cc","modified":1535781880016},{"_id":"themes/yilia/source-src/css/article-inner.scss","hash":"f7388f5c11370ef462f7cb913d8f72edf24ecaf9","modified":1535781880017},{"_id":"themes/yilia/source-src/css/article-main.scss","hash":"1577a2336b3ad122f49f60dff2bc1a97d4e7b18b","modified":1535781880017},{"_id":"themes/yilia/source-src/css/article-nav.scss","hash":"8f82fe898ba1c1bd00c24a7d8270feddc7eba3bc","modified":1535781880018},{"_id":"themes/yilia/source-src/css/article.scss","hash":"55d082fec4c6bb341725567acaa29ce37d50320a","modified":1535781880018},{"_id":"themes/yilia/source-src/css/aside.scss","hash":"07244c188f58ecfb90bb7c047b8cde977f1dc4b4","modified":1535781880019},{"_id":"themes/yilia/source-src/css/comment.scss","hash":"b85f344f2c66d43d7094746e0a9ccb21d0534201","modified":1535781880019},{"_id":"themes/yilia/source-src/css/fonts.scss","hash":"96d7eb1d42c06fdcccb8ef969f6ecd30c3194903","modified":1535781880022},{"_id":"themes/yilia/source-src/css/footer.scss","hash":"7ca837a4cc34db1c35f01baec85eb10ccc64ea86","modified":1535781880026},{"_id":"themes/yilia/source-src/css/global.scss","hash":"b4cb4f45a55d4250cd9056f76dab2a3c0dabcec4","modified":1535781880027},{"_id":"themes/yilia/source-src/css/grid.scss","hash":"f53ea8270752b5919ec5d79224d22af91f2eda12","modified":1535781880027},{"_id":"themes/yilia/source-src/css/highlight.scss","hash":"40e5aa5056dc0b3b9f51c5b387370b612e265d4e","modified":1535781880028},{"_id":"themes/yilia/source-src/css/left.scss","hash":"80dac621e43581a254d0152d5df901e4d0b01c09","modified":1535781880030},{"_id":"themes/yilia/source-src/css/main.scss","hash":"9eba1fcf4805256697528fcf3b767cf6dd8d0591","modified":1535781880031},{"_id":"themes/yilia/source-src/css/mobile-slider.scss","hash":"19f10fd2f0c3377aa4b165b3c2291ecf86dd9351","modified":1535781880031},{"_id":"themes/yilia/source-src/css/mobile.scss","hash":"d995dcd483a250fe61b426158afb61bf8923a927","modified":1535781880032},{"_id":"themes/yilia/source-src/css/page.scss","hash":"244c4d75c375978ff9edb74acc68825e63c6b235","modified":1535781880032},{"_id":"themes/yilia/source-src/css/reward.scss","hash":"a557a9ed244c82b8b71e9da9de3339d92783499f","modified":1535781880033},{"_id":"themes/yilia/source-src/css/scroll.scss","hash":"2495f7e4e3b055735c531f944b5f40a118a351ec","modified":1535781880033},{"_id":"themes/yilia/source-src/css/share.scss","hash":"9d6f6884f40c191882e56a1e1e1192400944a515","modified":1535781880034},{"_id":"themes/yilia/source-src/css/social.scss","hash":"a10a038a1dac8953cb4ffc7e04272eff9fac54e4","modified":1535781880034},{"_id":"themes/yilia/source-src/css/tags-cloud.scss","hash":"399744e98e7c67939ed9b23c2670d8baad044eda","modified":1535781880034},{"_id":"themes/yilia/source-src/css/tags.scss","hash":"915c93edd67c5326695cc7dc84b14c5f154dbcc8","modified":1535781880035},{"_id":"themes/yilia/source-src/css/tools.scss","hash":"2924fb6f77c4a9973cd928c2c7db0acb848ed483","modified":1535781880035},{"_id":"themes/yilia/source-src/css/tooltip.scss","hash":"b81cedbe31accca82e597801186911a7b5e6841c","modified":1535781880036},{"_id":"themes/yilia/source-src/js/Q.js","hash":"e56d9710afa79b31ca6b9fbd845f6d1895f5214b","modified":1535781880037},{"_id":"themes/yilia/source-src/js/anm.js","hash":"d18f6276a352b871390a4112d479b9e58b8cdbbe","modified":1535781880037},{"_id":"themes/yilia/source-src/js/aside.js","hash":"5e4c3c3d61f1e1ce2f09688d3aff25fadc851fff","modified":1535781880038},{"_id":"themes/yilia/source-src/js/browser.js","hash":"4dc04845cf27f350922b63f1813a9c82e6e33b05","modified":1535781880038},{"_id":"themes/yilia/source-src/js/fix.js","hash":"67b8819abb886c9d066fb3b0624ca15e06f63fe0","modified":1535781880039},{"_id":"themes/yilia/source-src/js/main.js","hash":"fe98bf90ce61658fe16ae057f8b6a512a845af3b","modified":1535781880039},{"_id":"themes/yilia/source-src/js/mobile.js","hash":"461c08ffcbc724d74ec7e0ff38e171eefe0f89fd","modified":1535781880040},{"_id":"themes/yilia/source-src/js/report.js","hash":"57680f9a23bd0a1eaafd64ae08cc33e20627ab15","modified":1535781880041},{"_id":"themes/yilia/source-src/js/share.js","hash":"d4ccff8266c37363b3904226f5d035b7db882c61","modified":1535781880041},{"_id":"themes/yilia/source-src/js/slider.js","hash":"0beaa112657ad57c723d9e773d5b79de60c1dd74","modified":1535781880042},{"_id":"themes/yilia/source-src/js/util.js","hash":"3bcdeb95072b85600874424e6929e3e22cfddaa0","modified":1535781880042},{"_id":"themes/yilia/source-src/js/viewer.js","hash":"c699cf3c89409ec8f044258e0715a470861b5d5d","modified":1535781880043},{"_id":"themes/yilia/layout/_partial/script.ejs","hash":"e98ec0b3b56f14d1d79af99ceb42727719a584f3","modified":1535781880009},{"_id":"themes/yilia/.git/objects/28/79647856b9662bde954a8cd663aac0a0fc1af9","hash":"6147c9a3d305d9bb7c5321bd1abafcb3e848ff0d","modified":1535795129000},{"_id":"themes/yilia/.git/objects/6f/6c427fb90872d73f320bb0a7518fd114ad836b","hash":"8c74848c129f11509dbc320295d9adac41793768","modified":1535795129000},{"_id":"themes/yilia/.git/objects/d3/02eb2fc48a37b3f65ae4f8752c9e4f17a89e67","hash":"3b431bda28b981a1d71038257f192fee0b2f1d38","modified":1535795129079},{"_id":"themes/yilia/.git/objects/pack/pack-f200012dcfbe84b9368f81a3ac0b2750ed5e24f0.idx","hash":"5b2cdae6e94f59439dc066b8fb4daffdd5485898","modified":1535781879821},{"_id":"themes/yilia/.git/refs/heads/master","hash":"661b75eb654bc49a9a62e1c201f31292f85221ee","modified":1535795129126},{"_id":"themes/yilia/layout/_partial/post/category.ejs","hash":"e777cbf959b11c4dfda649c562799899b90ab4a3","modified":1535781880003},{"_id":"themes/yilia/layout/_partial/post/changyan.ejs","hash":"086c8a88fd3bcae7ec13258df58e25d6354af2fa","modified":1535781880004},{"_id":"themes/yilia/layout/_partial/post/date.ejs","hash":"aae96de18d48cd3b9b7bf6fed0100e15b53cca97","modified":1535781880004},{"_id":"themes/yilia/layout/_partial/post/duoshuo.ejs","hash":"f6b4c4eaafb5ac386273354b5f64a26139b7a3b0","modified":1535781880005},{"_id":"themes/yilia/layout/_partial/post/gitment.ejs","hash":"25655016773aa5d0774c56115ae1736a9fc9ea1f","modified":1535781880005},{"_id":"themes/yilia/layout/_partial/post/nav.ejs","hash":"b6a97043f9ec37e571aacacfedcda1d4d75e3c7c","modified":1535781880006},{"_id":"themes/yilia/layout/_partial/post/share.ejs","hash":"345b262e3c3b75c0cd9a93d9ecabcf06e33e54ff","modified":1535781880006},{"_id":"themes/yilia/layout/_partial/post/tag.ejs","hash":"2c4e4ca36c9bb4318506c38aca7127f1f44d827f","modified":1535781880007},{"_id":"themes/yilia/layout/_partial/post/title.ejs","hash":"d4a460a35e2112d0c7414fd5e19b3a16093f1caf","modified":1535781880007},{"_id":"themes/yilia/layout/_partial/post/wangyiyun.ejs","hash":"fb022502c741b4a26bad6b2ad37245c10ede3f1a","modified":1535781880008},{"_id":"themes/yilia/source-src/css/core/_animation.scss","hash":"1834c3ed8560716e63bb3a50be94cac87fbbeaf3","modified":1535781880020},{"_id":"themes/yilia/source-src/css/core/_media-queries.scss","hash":"262ffcd88775080b7f511db37f58d2bcb1b2bfc7","modified":1535781880020},{"_id":"themes/yilia/source-src/css/core/_mixin.scss","hash":"91db061c9c17628291a005e5bd4936cf9d35a6c4","modified":1535781880021},{"_id":"themes/yilia/source-src/css/core/_reset.scss","hash":"398a49913b4a47d928103562b1ce94520be4026a","modified":1535781880022},{"_id":"themes/yilia/source-src/css/core/_variables.scss","hash":"6e75bdaa46de83094ba0873099c6e7d656a22453","modified":1535781880022},{"_id":"themes/yilia/source-src/css/fonts/iconfont.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1535781880024},{"_id":"themes/yilia/source-src/css/fonts/iconfont.svg","hash":"75767c904d483d9b93469afb6b92bb6bdface639","modified":1535781880025},{"_id":"themes/yilia/source-src/css/img/checkered-pattern.png","hash":"049262fa0886989d750637b264bed34ab51c23c8","modified":1535781880029},{"_id":"themes/yilia/source-src/css/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1535781880029},{"_id":"themes/yilia/source-src/css/img/tooltip.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1535781880030},{"_id":"themes/yilia/source-src/css/fonts/iconfont.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1535781880025},{"_id":"themes/yilia/source-src/css/fonts/iconfont.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1535781880026},{"_id":"themes/yilia/.git/logs/refs/heads/master","hash":"0f1913b4633212d0ebe070f4c90d5cc6ca974c31","modified":1535795129126},{"_id":"themes/yilia/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1535781879966},{"_id":"themes/yilia/.git/logs/refs/remotes/origin/HEAD","hash":"d249d7329585ffb5fb7ac3e3150d9e122df66d3e","modified":1535781879966},{"_id":"themes/yilia/.git/objects/pack/pack-f200012dcfbe84b9368f81a3ac0b2750ed5e24f0.pack","hash":"8e6db11a35542655327a3e5b45e330ef0f567748","modified":1535795129000}],"Category":[{"name":"VUE","_id":"cjmqc02kx00031ouoey6t949h"},{"name":"Diary","_id":"cjmqc02lg000c1ouo7gtb8une"},{"name":"HEXO","_id":"cjmqc2m09000g1ouo0ihhjjzp"}],"Data":[],"Page":[],"Post":[{"title":"[HEXO]搭建自己的免费博客","date":"2018-09-01T09:06:41.000Z","_content":"# MyBlog\n此博文主要写如何基于HEXO博客平台，搭建一个免费的博客。可以发布到gitHub的Pages,免费。也可以自行购买域名，云服务，搭建私人博客。\n[参考链接](https://www.cnblogs.com/wumz/p/8030244.html)\n[域名配置](https://blog.csdn.net/simba1949/article/details/79252352)\n<!--more-->\n# 1.Git安装后SSH密钥生成\n## 1.1Generating a new SSH key\nssh-keygen -t rsa -b 4096 -C \"your_email@example.com\"\nEG:\nThe key fingerprint is:\nThe key's randomart image is:\n+---[RSA 4096]----+\n|                 |\n+----[SHA256]-----+\n## 1.2配置GitHub的SSH keys\n[GitHub增加SSH keys](https://git-scm.com/book/zh/v2/GitHub-%E8%B4%A6%E6%88%B7%E7%9A%84%E5%88%9B%E5%BB%BA%E5%92%8C%E9%85%8D%E7%BD%AE)\n# 2.HEXO安装\n在hexo目录：npm install hexo-cli -g\n初始化\nhexo init blog\ncd blog\n安装\nnpm install\n生成页面\nhexo generate\n启动服务\nhexo server\n变更hexo端口\n$ hexo s --p 8081\n浏览器里面应该可以看到了\n目录结构：\n.\n├── _config.yml\t\t// 站点配置文件\n├── package.json\t// node应用信息\n├── scaffolds\t\t// 模板文件夹\n├── source\t\t\t// 资源存放目录\n|   ├── _drafts\t\t// 草稿\n|   └── _posts\t\t// 微博正文\n└── themes\t\t\t// 主题存放目录\n\n# 3.HEXO部署到GitHub\n## 3.1修改_config.yml 配置文件\n```\n# Deployment\n## Docs: https://hexo.io/docs/deployment.html\ndeploy:\n  type: git\n  repo: git@github.com:nidegexing/nidegexing.github.io.git\n  branch: master\n  message:\n```\n## 3.2安装hexo部署插件\n[Desc](https://github.com/hexojs/hexo-deployer-git)\ncnpm install hexo-deployer-git --save\n- for npm version under 4\n$ npm install git+git@github.com:hexojs/hexo-deployer-git.git --save\n- for npm version 5\n$ npm install git+ssh://git@github.com:hexojs/hexo-deployer-git.git --save\n## 3.3部署 4ddf3a8a265ad9c32d07292d3552cb85893a98d2\n$ hexo clean\n$ hexo generate\n$ hexo deploy\n民工三连：hexo clean && hexo g && hexo d\n# 4.安装HEXO主题\ngit clone https://github.com/iissnan/hexo-theme-next themes/next\ngit clone https://github.com/litten/hexo-theme-yilia themes/yilia\n修改站点配置文件：themes：next\n## 4.1HEXO常用指令\nhexo clean #清除缓存\nhexo g  #保存修改，生成文件\nhexo s  #启动本地服务\nhexo d  #发布到远程\nhexo init #生成站点\nhexo new page \"xxx\" #生成页面\nhexo new \"\" #生成文章\nnpm install --save xxx  #安装插件\nnpm unstall xxx #卸载插件\n## 4.2.HEXO整体流程(阿里云)\n[HEXO教程](https://www.cnblogs.com/visugar/p/6821777.html)\n# 5.日常的维护\n## 5.1HEXO是根据source文件来渲染public中的文件，进而发布。\n所以我们只要维护source就可以\n## 5.2为了个性化，要调整模板，就比较困难了哦\n\n# TIPS:\n1.使用yilia主题，加了下面标签才有MORE\n```\n<!--more--> //在需要阶段的地方插入该代码语句\n```\n2.如何写作博客，详见HEXO官网。这里简单说明下\n2.1通过hexo指令，生成文章\nhexo new \"\" #生成文章\n2.2通过文章头部的date属性，来标记文章的创建日期，来达到排序的目的。\n","source":"_posts/2018-10-01-HEXO-搭建自己的免费博客.md","raw":"---\ntitle: '[HEXO]搭建自己的免费博客'\ndate: 2018-09-01 17:06:41\ncategories:\n- HEXO\ntags:\n- hexo\n- blog\n- 免费\n---\n# MyBlog\n此博文主要写如何基于HEXO博客平台，搭建一个免费的博客。可以发布到gitHub的Pages,免费。也可以自行购买域名，云服务，搭建私人博客。\n[参考链接](https://www.cnblogs.com/wumz/p/8030244.html)\n[域名配置](https://blog.csdn.net/simba1949/article/details/79252352)\n<!--more-->\n# 1.Git安装后SSH密钥生成\n## 1.1Generating a new SSH key\nssh-keygen -t rsa -b 4096 -C \"your_email@example.com\"\nEG:\nThe key fingerprint is:\nThe key's randomart image is:\n+---[RSA 4096]----+\n|                 |\n+----[SHA256]-----+\n## 1.2配置GitHub的SSH keys\n[GitHub增加SSH keys](https://git-scm.com/book/zh/v2/GitHub-%E8%B4%A6%E6%88%B7%E7%9A%84%E5%88%9B%E5%BB%BA%E5%92%8C%E9%85%8D%E7%BD%AE)\n# 2.HEXO安装\n在hexo目录：npm install hexo-cli -g\n初始化\nhexo init blog\ncd blog\n安装\nnpm install\n生成页面\nhexo generate\n启动服务\nhexo server\n变更hexo端口\n$ hexo s --p 8081\n浏览器里面应该可以看到了\n目录结构：\n.\n├── _config.yml\t\t// 站点配置文件\n├── package.json\t// node应用信息\n├── scaffolds\t\t// 模板文件夹\n├── source\t\t\t// 资源存放目录\n|   ├── _drafts\t\t// 草稿\n|   └── _posts\t\t// 微博正文\n└── themes\t\t\t// 主题存放目录\n\n# 3.HEXO部署到GitHub\n## 3.1修改_config.yml 配置文件\n```\n# Deployment\n## Docs: https://hexo.io/docs/deployment.html\ndeploy:\n  type: git\n  repo: git@github.com:nidegexing/nidegexing.github.io.git\n  branch: master\n  message:\n```\n## 3.2安装hexo部署插件\n[Desc](https://github.com/hexojs/hexo-deployer-git)\ncnpm install hexo-deployer-git --save\n- for npm version under 4\n$ npm install git+git@github.com:hexojs/hexo-deployer-git.git --save\n- for npm version 5\n$ npm install git+ssh://git@github.com:hexojs/hexo-deployer-git.git --save\n## 3.3部署 4ddf3a8a265ad9c32d07292d3552cb85893a98d2\n$ hexo clean\n$ hexo generate\n$ hexo deploy\n民工三连：hexo clean && hexo g && hexo d\n# 4.安装HEXO主题\ngit clone https://github.com/iissnan/hexo-theme-next themes/next\ngit clone https://github.com/litten/hexo-theme-yilia themes/yilia\n修改站点配置文件：themes：next\n## 4.1HEXO常用指令\nhexo clean #清除缓存\nhexo g  #保存修改，生成文件\nhexo s  #启动本地服务\nhexo d  #发布到远程\nhexo init #生成站点\nhexo new page \"xxx\" #生成页面\nhexo new \"\" #生成文章\nnpm install --save xxx  #安装插件\nnpm unstall xxx #卸载插件\n## 4.2.HEXO整体流程(阿里云)\n[HEXO教程](https://www.cnblogs.com/visugar/p/6821777.html)\n# 5.日常的维护\n## 5.1HEXO是根据source文件来渲染public中的文件，进而发布。\n所以我们只要维护source就可以\n## 5.2为了个性化，要调整模板，就比较困难了哦\n\n# TIPS:\n1.使用yilia主题，加了下面标签才有MORE\n```\n<!--more--> //在需要阶段的地方插入该代码语句\n```\n2.如何写作博客，详见HEXO官网。这里简单说明下\n2.1通过hexo指令，生成文章\nhexo new \"\" #生成文章\n2.2通过文章头部的date属性，来标记文章的创建日期，来达到排序的目的。\n","slug":"HEXO-搭建自己的免费博客","published":1,"updated":"2018-10-01T13:37:31.924Z","_id":"cjmqc02ko00001ouo3q71kyhs","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"MyBlog\"><a href=\"#MyBlog\" class=\"headerlink\" title=\"MyBlog\"></a>MyBlog</h1><p>此博文主要写如何基于HEXO博客平台，搭建一个免费的博客。可以发布到gitHub的Pages,免费。也可以自行购买域名，云服务，搭建私人博客。<br><a href=\"https://www.cnblogs.com/wumz/p/8030244.html\" target=\"_blank\" rel=\"noopener\">参考链接</a><br><a href=\"https://blog.csdn.net/simba1949/article/details/79252352\" target=\"_blank\" rel=\"noopener\">域名配置</a><br><a id=\"more\"></a></p>\n<h1 id=\"1-Git安装后SSH密钥生成\"><a href=\"#1-Git安装后SSH密钥生成\" class=\"headerlink\" title=\"1.Git安装后SSH密钥生成\"></a>1.Git安装后SSH密钥生成</h1><h2 id=\"1-1Generating-a-new-SSH-key\"><a href=\"#1-1Generating-a-new-SSH-key\" class=\"headerlink\" title=\"1.1Generating a new SSH key\"></a>1.1Generating a new SSH key</h2><p>ssh-keygen -t rsa -b 4096 -C “<a href=\"mailto:your_email@example.com\" target=\"_blank\" rel=\"noopener\">your_email@example.com</a>“<br>EG:<br>The key fingerprint is:<br>The key’s randomart image is:<br>+—[RSA 4096]—-+<br>|                 |<br>+—-[SHA256]—–+</p>\n<h2 id=\"1-2配置GitHub的SSH-keys\"><a href=\"#1-2配置GitHub的SSH-keys\" class=\"headerlink\" title=\"1.2配置GitHub的SSH keys\"></a>1.2配置GitHub的SSH keys</h2><p><a href=\"https://git-scm.com/book/zh/v2/GitHub-%E8%B4%A6%E6%88%B7%E7%9A%84%E5%88%9B%E5%BB%BA%E5%92%8C%E9%85%8D%E7%BD%AE\" target=\"_blank\" rel=\"noopener\">GitHub增加SSH keys</a></p>\n<h1 id=\"2-HEXO安装\"><a href=\"#2-HEXO安装\" class=\"headerlink\" title=\"2.HEXO安装\"></a>2.HEXO安装</h1><p>在hexo目录：npm install hexo-cli -g<br>初始化<br>hexo init blog<br>cd blog<br>安装<br>npm install<br>生成页面<br>hexo generate<br>启动服务<br>hexo server<br>变更hexo端口<br>$ hexo s –p 8081<br>浏览器里面应该可以看到了<br>目录结构：<br>.<br>├── _config.yml        // 站点配置文件<br>├── package.json    // node应用信息<br>├── scaffolds        // 模板文件夹<br>├── source            // 资源存放目录<br>|   ├── _drafts        // 草稿<br>|   └── _posts        // 微博正文<br>└── themes            // 主题存放目录</p>\n<h1 id=\"3-HEXO部署到GitHub\"><a href=\"#3-HEXO部署到GitHub\" class=\"headerlink\" title=\"3.HEXO部署到GitHub\"></a>3.HEXO部署到GitHub</h1><h2 id=\"3-1修改-config-yml-配置文件\"><a href=\"#3-1修改-config-yml-配置文件\" class=\"headerlink\" title=\"3.1修改_config.yml 配置文件\"></a>3.1修改_config.yml 配置文件</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Deployment</span><br><span class=\"line\">## Docs: https://hexo.io/docs/deployment.html</span><br><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repo: git@github.com:nidegexing/nidegexing.github.io.git</span><br><span class=\"line\">  branch: master</span><br><span class=\"line\">  message:</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-2安装hexo部署插件\"><a href=\"#3-2安装hexo部署插件\" class=\"headerlink\" title=\"3.2安装hexo部署插件\"></a>3.2安装hexo部署插件</h2><p><a href=\"https://github.com/hexojs/hexo-deployer-git\" target=\"_blank\" rel=\"noopener\">Desc</a><br>cnpm install hexo-deployer-git –save</p>\n<ul>\n<li>for npm version under 4<br>$ npm install <a href=\"mailto:git+git@github.com\" target=\"_blank\" rel=\"noopener\">git+git@github.com</a>:hexojs/hexo-deployer-git.git –save</li>\n<li>for npm version 5<br>$ npm install git+ssh:<a href=\"mailto://git@github.com\" target=\"_blank\" rel=\"noopener\">//git@github.com</a>:hexojs/hexo-deployer-git.git –save<h2 id=\"3-3部署-4ddf3a8a265ad9c32d07292d3552cb85893a98d2\"><a href=\"#3-3部署-4ddf3a8a265ad9c32d07292d3552cb85893a98d2\" class=\"headerlink\" title=\"3.3部署 4ddf3a8a265ad9c32d07292d3552cb85893a98d2\"></a>3.3部署 4ddf3a8a265ad9c32d07292d3552cb85893a98d2</h2>$ hexo clean<br>$ hexo generate<br>$ hexo deploy<br>民工三连：hexo clean &amp;&amp; hexo g &amp;&amp; hexo d<h1 id=\"4-安装HEXO主题\"><a href=\"#4-安装HEXO主题\" class=\"headerlink\" title=\"4.安装HEXO主题\"></a>4.安装HEXO主题</h1>git clone <a href=\"https://github.com/iissnan/hexo-theme-next\" target=\"_blank\" rel=\"noopener\">https://github.com/iissnan/hexo-theme-next</a> themes/next<br>git clone <a href=\"https://github.com/litten/hexo-theme-yilia\" target=\"_blank\" rel=\"noopener\">https://github.com/litten/hexo-theme-yilia</a> themes/yilia<br>修改站点配置文件：themes：next<h2 id=\"4-1HEXO常用指令\"><a href=\"#4-1HEXO常用指令\" class=\"headerlink\" title=\"4.1HEXO常用指令\"></a>4.1HEXO常用指令</h2>hexo clean #清除缓存<br>hexo g  #保存修改，生成文件<br>hexo s  #启动本地服务<br>hexo d  #发布到远程<br>hexo init #生成站点<br>hexo new page “xxx” #生成页面<br>hexo new “” #生成文章<br>npm install –save xxx  #安装插件<br>npm unstall xxx #卸载插件<h2 id=\"4-2-HEXO整体流程-阿里云\"><a href=\"#4-2-HEXO整体流程-阿里云\" class=\"headerlink\" title=\"4.2.HEXO整体流程(阿里云)\"></a>4.2.HEXO整体流程(阿里云)</h2><a href=\"https://www.cnblogs.com/visugar/p/6821777.html\" target=\"_blank\" rel=\"noopener\">HEXO教程</a><h1 id=\"5-日常的维护\"><a href=\"#5-日常的维护\" class=\"headerlink\" title=\"5.日常的维护\"></a>5.日常的维护</h1><h2 id=\"5-1HEXO是根据source文件来渲染public中的文件，进而发布。\"><a href=\"#5-1HEXO是根据source文件来渲染public中的文件，进而发布。\" class=\"headerlink\" title=\"5.1HEXO是根据source文件来渲染public中的文件，进而发布。\"></a>5.1HEXO是根据source文件来渲染public中的文件，进而发布。</h2>所以我们只要维护source就可以<h2 id=\"5-2为了个性化，要调整模板，就比较困难了哦\"><a href=\"#5-2为了个性化，要调整模板，就比较困难了哦\" class=\"headerlink\" title=\"5.2为了个性化，要调整模板，就比较困难了哦\"></a>5.2为了个性化，要调整模板，就比较困难了哦</h2></li>\n</ul>\n<h1 id=\"TIPS\"><a href=\"#TIPS\" class=\"headerlink\" title=\"TIPS:\"></a>TIPS:</h1><p>1.使用yilia主题，加了下面标签才有MORE<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--more--&gt; //在需要阶段的地方插入该代码语句</span><br></pre></td></tr></table></figure></p>\n<p>2.如何写作博客，详见HEXO官网。这里简单说明下<br>2.1通过hexo指令，生成文章<br>hexo new “” #生成文章<br>2.2通过文章头部的date属性，来标记文章的创建日期，来达到排序的目的。</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"MyBlog\"><a href=\"#MyBlog\" class=\"headerlink\" title=\"MyBlog\"></a>MyBlog</h1><p>此博文主要写如何基于HEXO博客平台，搭建一个免费的博客。可以发布到gitHub的Pages,免费。也可以自行购买域名，云服务，搭建私人博客。<br><a href=\"https://www.cnblogs.com/wumz/p/8030244.html\" target=\"_blank\" rel=\"noopener\">参考链接</a><br><a href=\"https://blog.csdn.net/simba1949/article/details/79252352\" target=\"_blank\" rel=\"noopener\">域名配置</a><br>","more":"</p>\n<h1 id=\"1-Git安装后SSH密钥生成\"><a href=\"#1-Git安装后SSH密钥生成\" class=\"headerlink\" title=\"1.Git安装后SSH密钥生成\"></a>1.Git安装后SSH密钥生成</h1><h2 id=\"1-1Generating-a-new-SSH-key\"><a href=\"#1-1Generating-a-new-SSH-key\" class=\"headerlink\" title=\"1.1Generating a new SSH key\"></a>1.1Generating a new SSH key</h2><p>ssh-keygen -t rsa -b 4096 -C “<a href=\"mailto:your_email@example.com\" target=\"_blank\" rel=\"noopener\">your_email@example.com</a>“<br>EG:<br>The key fingerprint is:<br>The key’s randomart image is:<br>+—[RSA 4096]—-+<br>|                 |<br>+—-[SHA256]—–+</p>\n<h2 id=\"1-2配置GitHub的SSH-keys\"><a href=\"#1-2配置GitHub的SSH-keys\" class=\"headerlink\" title=\"1.2配置GitHub的SSH keys\"></a>1.2配置GitHub的SSH keys</h2><p><a href=\"https://git-scm.com/book/zh/v2/GitHub-%E8%B4%A6%E6%88%B7%E7%9A%84%E5%88%9B%E5%BB%BA%E5%92%8C%E9%85%8D%E7%BD%AE\" target=\"_blank\" rel=\"noopener\">GitHub增加SSH keys</a></p>\n<h1 id=\"2-HEXO安装\"><a href=\"#2-HEXO安装\" class=\"headerlink\" title=\"2.HEXO安装\"></a>2.HEXO安装</h1><p>在hexo目录：npm install hexo-cli -g<br>初始化<br>hexo init blog<br>cd blog<br>安装<br>npm install<br>生成页面<br>hexo generate<br>启动服务<br>hexo server<br>变更hexo端口<br>$ hexo s –p 8081<br>浏览器里面应该可以看到了<br>目录结构：<br>.<br>├── _config.yml        // 站点配置文件<br>├── package.json    // node应用信息<br>├── scaffolds        // 模板文件夹<br>├── source            // 资源存放目录<br>|   ├── _drafts        // 草稿<br>|   └── _posts        // 微博正文<br>└── themes            // 主题存放目录</p>\n<h1 id=\"3-HEXO部署到GitHub\"><a href=\"#3-HEXO部署到GitHub\" class=\"headerlink\" title=\"3.HEXO部署到GitHub\"></a>3.HEXO部署到GitHub</h1><h2 id=\"3-1修改-config-yml-配置文件\"><a href=\"#3-1修改-config-yml-配置文件\" class=\"headerlink\" title=\"3.1修改_config.yml 配置文件\"></a>3.1修改_config.yml 配置文件</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Deployment</span><br><span class=\"line\">## Docs: https://hexo.io/docs/deployment.html</span><br><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repo: git@github.com:nidegexing/nidegexing.github.io.git</span><br><span class=\"line\">  branch: master</span><br><span class=\"line\">  message:</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-2安装hexo部署插件\"><a href=\"#3-2安装hexo部署插件\" class=\"headerlink\" title=\"3.2安装hexo部署插件\"></a>3.2安装hexo部署插件</h2><p><a href=\"https://github.com/hexojs/hexo-deployer-git\" target=\"_blank\" rel=\"noopener\">Desc</a><br>cnpm install hexo-deployer-git –save</p>\n<ul>\n<li>for npm version under 4<br>$ npm install <a href=\"mailto:git+git@github.com\" target=\"_blank\" rel=\"noopener\">git+git@github.com</a>:hexojs/hexo-deployer-git.git –save</li>\n<li>for npm version 5<br>$ npm install git+ssh:<a href=\"mailto://git@github.com\" target=\"_blank\" rel=\"noopener\">//git@github.com</a>:hexojs/hexo-deployer-git.git –save<h2 id=\"3-3部署-4ddf3a8a265ad9c32d07292d3552cb85893a98d2\"><a href=\"#3-3部署-4ddf3a8a265ad9c32d07292d3552cb85893a98d2\" class=\"headerlink\" title=\"3.3部署 4ddf3a8a265ad9c32d07292d3552cb85893a98d2\"></a>3.3部署 4ddf3a8a265ad9c32d07292d3552cb85893a98d2</h2>$ hexo clean<br>$ hexo generate<br>$ hexo deploy<br>民工三连：hexo clean &amp;&amp; hexo g &amp;&amp; hexo d<h1 id=\"4-安装HEXO主题\"><a href=\"#4-安装HEXO主题\" class=\"headerlink\" title=\"4.安装HEXO主题\"></a>4.安装HEXO主题</h1>git clone <a href=\"https://github.com/iissnan/hexo-theme-next\" target=\"_blank\" rel=\"noopener\">https://github.com/iissnan/hexo-theme-next</a> themes/next<br>git clone <a href=\"https://github.com/litten/hexo-theme-yilia\" target=\"_blank\" rel=\"noopener\">https://github.com/litten/hexo-theme-yilia</a> themes/yilia<br>修改站点配置文件：themes：next<h2 id=\"4-1HEXO常用指令\"><a href=\"#4-1HEXO常用指令\" class=\"headerlink\" title=\"4.1HEXO常用指令\"></a>4.1HEXO常用指令</h2>hexo clean #清除缓存<br>hexo g  #保存修改，生成文件<br>hexo s  #启动本地服务<br>hexo d  #发布到远程<br>hexo init #生成站点<br>hexo new page “xxx” #生成页面<br>hexo new “” #生成文章<br>npm install –save xxx  #安装插件<br>npm unstall xxx #卸载插件<h2 id=\"4-2-HEXO整体流程-阿里云\"><a href=\"#4-2-HEXO整体流程-阿里云\" class=\"headerlink\" title=\"4.2.HEXO整体流程(阿里云)\"></a>4.2.HEXO整体流程(阿里云)</h2><a href=\"https://www.cnblogs.com/visugar/p/6821777.html\" target=\"_blank\" rel=\"noopener\">HEXO教程</a><h1 id=\"5-日常的维护\"><a href=\"#5-日常的维护\" class=\"headerlink\" title=\"5.日常的维护\"></a>5.日常的维护</h1><h2 id=\"5-1HEXO是根据source文件来渲染public中的文件，进而发布。\"><a href=\"#5-1HEXO是根据source文件来渲染public中的文件，进而发布。\" class=\"headerlink\" title=\"5.1HEXO是根据source文件来渲染public中的文件，进而发布。\"></a>5.1HEXO是根据source文件来渲染public中的文件，进而发布。</h2>所以我们只要维护source就可以<h2 id=\"5-2为了个性化，要调整模板，就比较困难了哦\"><a href=\"#5-2为了个性化，要调整模板，就比较困难了哦\" class=\"headerlink\" title=\"5.2为了个性化，要调整模板，就比较困难了哦\"></a>5.2为了个性化，要调整模板，就比较困难了哦</h2></li>\n</ul>\n<h1 id=\"TIPS\"><a href=\"#TIPS\" class=\"headerlink\" title=\"TIPS:\"></a>TIPS:</h1><p>1.使用yilia主题，加了下面标签才有MORE<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--more--&gt; //在需要阶段的地方插入该代码语句</span><br></pre></td></tr></table></figure></p>\n<p>2.如何写作博客，详见HEXO官网。这里简单说明下<br>2.1通过hexo指令，生成文章<br>hexo new “” #生成文章<br>2.2通过文章头部的date属性，来标记文章的创建日期，来达到排序的目的。</p>"},{"title":"Hello World","date":"2018-09-01T04:06:41.000Z","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ndate: 2018-09-01 12:06:41\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"updated":"2018-10-01T12:02:30.642Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmqc02kv00021ouoxpx6yocb","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n"},{"title":"为什么要写博客","date":"2018-09-01T07:06:41.000Z","_content":"## 为什么要写博客？\n摘自[[BetterExplained]为什么你应该（从现在开始就）写博客](http://mindhacks.cn/2009/02/15/why-you-should-start-blogging-now/)\n用一句话来说就是，写一个博客有很多好处，却没有任何明显的坏处。\n\n用博客的形式来记录下你有价值的思考，会带来很多好处，却没有任何明显的坏处。\nPS：碎碎念不算思考、心情琐记不算思考、唠唠叨叨也不算思考、没话找话也不算思考，请以此类推。\n\n<!--more-->\n\n写一个长期的价值博客的最大的几点好处：\n### 1.能够交到很多志同道合的朋友\n&emsp;&emsp;我自己既写博客，也读别人的博客，在这个时代，对于生活中的绝大多数人来说，拓宽朋友圈子的途径几乎只有一个，通过网络，而如何在网络中寻找到气味相投的朋友，如何判断别人和自己是否有共同语言？显然，通过天天在SNS上碎碎念的那些日记是难以做到的。我佩服的一些朋友几乎全都是长期用博客记录想法的人，因此，和他们即便不打照面，也是心照不宣。即便素未谋面也能坐下来就聊得热火朝天。\n\n&emsp;&emsp;为什么博客在结交志同道合的朋友方面的潜力要远胜于原始的交谈方式？很简单，第一，博客无地域限制，整个互联网上从A到B只有一个点击的距离，而传统的建立朋友圈子的方法则受到地域限制。第二，也是更重要的一点，即如果按照以前结交朋友的方式，需要互相聊天，交流观点，然后才逐渐熟悉起来，这需要一个较长的过程，而且更糟糕的是，当你遇到另一个陌生人，又要把整个过程重复一次，表达你已经对老友表达过的那番想法。可博客却做到了“一次表达，无数次阅读”，当我看到一个写了好几年的博客，看完了之后我仿佛和这个人交谈了很久，用程序员们喜欢听的话来说就是，“博客极大地增强了话语的复用性”。\n\n\n### 2.书写是为了更好的思考\n我在《书写是为了更好的思考》里面详细总结了书写的好处，这里就不拷贝粘贴了。有些想法如果不写下来，也就忘掉了，有一个广为流传的《数学牛人们的轶事》（荣耀属于ukim）里面讲了希尔伯特的一个故事：一次在Hilbert的讨论班上，一个年轻人报告，其中用了一个很漂亮的定理，Hilbert说“这真是一个妙不可言（wunderbaschon）的定理呀,是谁发现的？”那个年轻人茫然的站了很久，对Hilbert说：“是你.……”。\n\n### 3.“教”是最好的“学”\n&emsp;&emsp;如果一件事情你不能讲清楚，十有八九你还没有完全理解。绝大多数人应该都知道在程序员行业面试官经常要求你讲解一个东西给他听，他会说他不懂这个东西（他如果真的不懂的话效果其实是最好的），而你的任务则是说到让他理解为止。\n\n&emsp;&emsp;为了让一个不明白的人做到明白，你必须要知道从明白到不明白他究竟需要掌握哪些概念，这就迫使我们对我们大脑中整个的知识体系来个寻根究底，把藏在水面之下的那些东西统统挖出来，把大脑中的那些我们知道、但不知道自己知道的潜在概念或假设（assumptions）都挖出来，把它们从内隐记忆拉扯到外显记忆中。因为只有完全知道、并知道自己知道一切来龙去脉的人，才能真正把一件事情讲得通通透透。\n\n&emsp;&emsp;但是，你可能会怀疑，那除了能够讲清楚之外，弄清自己到底知道哪些东西还有其他什么好处吗？如果没有其他好处，那我又何必费这个劲呢？我又不当老师。\n\n\n&emsp;&emsp;我们的绝大多数知识在绝大多数时候都隐藏在潜意识中，其实我们意识的窗口很小，我们的工作记忆只能容纳寥寥数个条目（记得那个“看你能够记住屏幕上同时闪现的多少个数字”的flash小游戏吗？），我们平时所作的推理过程很大部分都是自动的，发生在潜意识中，而我们只能感知到一些中间结论。不信你回忆一下你在和别人讨论问题的时候有多少次觉得“反正就是这样，我感觉得到它是对的，但是你问我，我也说不清到底怎么回事”，对此你不觉得很奇怪吗？如果你都不能从逻辑上支持你的结论，你怎么就能确信它是对的呢？仅仅因为你的直觉强烈地告诉你它是对的？那如果旁边有另一个人，他和你持相反的观念，而他的直觉也强烈地告诉他他是对的。这时候你又怎么想？“他的直觉错了，我的直觉是对的”？难道你这么自信你的直觉是世界上最可靠的？\n\n&emsp;&emsp;我自己则是非常珍惜类似这样的机会，即当“我强烈地觉得它是对的，但我却说不出所以然来”，这时候往往是到大脑中翻箱倒柜的时候，弄清来龙去脉的时候，深入反思的时候，纠正一直以来错误的潜在前提假设的时候。另一方面，“我强烈地觉得这个说法有问题，但我却说不清它为什么有问题，到底哪有问题”，这也是一个极有意义的瞬间，它几乎总是意味着你对一个问题的认识有潜在的偏差，肯定是在你自己都没有觉知到的地方引入了一个潜在的假设、偷换了一个重要的概念，等等。而这种时候就是深入反思的时候，当你终于潜到问题的底层，触摸到问题的实质，把水面之下的冰山整体看清了的时候你会有一种通体舒泰的感觉。\n\n&emsp;&emsp;为什么说以上这些？因为刚才说的是你必须等待这样的反思机会，但如果你选择经常总结自己的知识体系，并说出来给你的读者听，你就会发现你自己创造了这样的机会。如果我们平时不反思，我们觉得很多事情都是当然的，但结果如果要你一开口说给别人听，常常会发现事情就开始变得不那么明显了，你说着说着，就开始莫名其妙地发现自己需要用到“反正”这个词了。\n\n&emsp;&emsp;于是，反思的机会就来了。\n\n&emsp;&emsp;一旦你把自己潜意识里面的东西从幕后拉出来，你就有了面对并反思它们的可能，而不是任它们在幕后阴险地左右你的思维。很多时候我们的思路出了问题并不是我们不会反思，而是不知道自己的思维中有那些隐含的假设（assumptions），如果你只感觉到答案，却不知道你大脑得到这个答案之前做了哪些推理，你又怎么知道哪一环可能出了问题呢？另一方面，一旦你弄清了自己到底是怎么想的，离意识到问题就不远了，很简单的道理——如果别人和你争辩的时候总是只摆立场，你就很难和他辩，但如果他把自己的推理过程原原本本暴露给你，批判起来总是容易得多的。（也正因为这个原因有很多人总是把逻辑藏在背后，不敢暴露出来）\n\n&emsp;&emsp;绝大多数时候其实我们都会不假思索地得出一些结论，就像上了发条的自动机，但其实我们并不知道这些结论到底怎么来的，在思维的背后到底发生了哪些事情，故而当我们发现我们的结论错了的时候，一头雾水，没法着手寻找到底在哪错了。如果你注意一下很多人的发言（论坛、博客等等），如果你把他们的发言分为“前提”、“假设”、“逻辑”、“结论”这四个部分，你会发现一大堆人只会不停地下结论，摆立场，却见不到这些结论或离场的前提、假设和个中逻辑，倒也不是他们不愿意写出逻辑，而是因为反思自己的思维过程实在是一件困难非常的事情，我们的推理过程很大一部分发生在意识的水面之下，只有当有了重要结论的时候这条逻辑链才会浮出来冒一个泡，让我们的意识捕捉到。更何况绝大多数时候我们用的其实并不是完整严密的逻辑思维，而是思维捷径。\n\n> 去教一个完全不懂的人，则是一种最最强大和彻底的反思途径——因为他没有任何预备的知识，所以要让他弄懂你所知道的，你就必须彻底反思你的知识体系，弄清这座大厦的根基在什么地方，弄清它的骨架在什么地方，一砖一瓦到底是怎么垒起来的，你不能自己站在11层上，然后假设你的读者站在第10层，指望着只要告诉他第11层有那些内容就让他明白。你的读者站在第一层，你必须知道你脚下踩着的另外10层到底是怎么构造的。这就迫使你对你所掌握的、或之前认为正确的那些东西作彻彻底底的、深刻的反思，你的受众越是不懂，你需要反思得就越深刻。\n\n### 4.讨论是绝佳的反思\n&emsp;&emsp;另一方面，很多时候我们并不是有机会说给完全不懂的人听，更大的可能性是说给同领域有一定基础的人听，这个时候并不代表就不能促使反思了，实际上，你会发现，如果你公开你的想法，几乎总能看到与你持不同意见的人，然后你通过比较你和他的观念之间的差别，会发现你们在一开始的思路上就存在差异，差异从哪里来的？在进一步讨论中你们就会不断地迫使对方拿出更深层次的理由，这同样也是一种非常有效地促使自己反思的方法，在讨论的过程中双方的理由自然会变得越来越深入，越来越接近问题的本质，一些平时难以注意到的深层面的差异性就会逐渐浮现出来，你也就多了一次难得的机会去审视自己的思维中到底存放了哪些错误的信息。\n\n### 5.激励你去持续学习和思考\n&emsp;&emsp;如果你没有持续学习和思考的习惯，你的博客很快就会没有内容可写，就只能整点碎碎念或者转载，然后你就会失去读者，然后你就会关掉博客，然后一旦关掉博客之后你也就死了写博客的心，然后就少了一条激励你去思考和总结的途径，然后你变得更不高兴总结和思考，然后…\n\n&emsp;&emsp;为了打破这个死循环，不要永久停止更新你的博客，就算你两个月，三个月都不写，只要你每篇都是写自己思考的产物，写有价值的东西，在互联网上，金子的确总是会发光的，因为有无数的信息聚合平台在期待这些有价值的内容，有搜索引擎为你的内容提供海量的潜在读者，有海量的人肉在手动挖掘和转载那些有价值的东西。我们所能做的最差的一个决策莫过于停止做一件没有任何坏处，却有一大堆好处的事情。\n\n&emsp;&emsp;为了让你的博客有价值，你必须不断总结自己学习的结果，你必须不断思考，给出比别人深刻、独到的见解。这看起来有点本末倒置，但很快本和末就会正过来。\n\n### 6.学会持之以恒地做一件事情\n&emsp;&emsp;很多人在生活中容易觉得迷失，不知道想要做什么，是因为没有一件能够持续地做的事情，用俗话来说就是没有主心骨。用积极心理学的话来说就是没有一件能够创造流体验的事情，而书写自己的思想则是一件容易产生流体验的事情，在书写的时候，特别是理性地书写的时候，大脑逐渐进入推理分析模块，一切不愉快的情绪，烦躁感都会逐渐消隐下去。不过前提是你得开始，并且坚持过一开始的困难期，以后的一切便成了习惯成自然。\n\n### 7.一个长期的价值博客是一份很好的简历\n&emsp;&emsp;这里的“简历”并非是狭义上的求职简历，毕竟现在还没有到价值博客的时代，很多人写博客都是到处转载或者干脆碎碎念，正因此面试官未必拿个人博客当成了解一个人的更可靠窗口。这里的“简历”是指一个让别人了解自己的窗口，虽然我们未必做得到像罗永浩、Keso这样的博客，个人的影响力已经足以支撑出一份事业（牛博和5gme），但至少你会因此而结识更多的人，你的博客价值越高，你结识的人就越牛，跟牛人交流又会让你的眼界得到极大的开阔，打开一扇又一扇你原本不知道的门，于是你就变得更牛… 这是一个良性循环。\n\n## 怎么做到长期写一个价值博客\n\n&emsp;&emsp;注意到我并没有说“怎么做到长期**坚持**写一个价值博客”，因为当思考和总结成为习惯之后，诉诸文字以及借助书写来进一步思考就变成了一件自然而然的事情，就变成了一件“因为你在思考和总结从而必须书写下来”的事情，博客就变成了副产品。\n\n&emsp;&emsp;一开始的时候你是因为要写博客而去使劲地思考和总结，指望给出令人眼睛一亮的东西，到了后来，就变成了因为你习惯了思考和总结，因为你意识到书写是更好的思考，你就必须使你的想法成为文字。至此本和末就会各归原位，不再颠倒。\n\n&emsp;&emsp;怎样做到长期写一个价值博客？也许有人会给出很多有趣有用的小技巧来提供动机和激励，譬如如何做SEO，如何鼓励读者留言等等，但是这些我都不想说，我只想说最最重要的，那就是：\n\n> 让你自己成为一个持续学习和思考的人，并只写你真正思考和总结之后的产物，其他一切就会随之而来。\n\n&emsp;&emsp;就像那句经常被人传阅的话：只做你最感兴趣的事情，钱会随之而来[2]。\n\n&emsp;&emsp;这方面的具体例子大家可以留意一下，随处可见，就不一一举了。我想再重复一下的是，千万不要碎碎念，我能理解每个人都想偶尔发发牢骚的冲动，但是现在已经有了一个很好的窗口：twitter，所以立即停止在你的博客上碎碎念，阅读博客的人希望得到信息而非噪音。如果实在忍不住想碎碎念的话不妨换一下位置，这么来告诉自己：如果你看到别人博客来上这么一段，你会有兴趣看吗？\n\n## 可能出现的问题以及怎样应付\n\n&emsp;&emsp;即便上文给出了N条写博客的理由，但有时候只要一条不写的理由就会让人停止做一件事情。所以我特别加上一节“可能出现的问题以及怎样应付”，《影响力2》[3]第五章雄辩地证明，“Much of Will is Skill”，意志力很大程度上来源于有正确的方法，而非天生。\n\n### 1.担心别人认为没有价值\n&emsp;&emsp;事实是，你面临过的问题总会有人面临过，你独立思考了，别人没有，你的文章对他们就会有价值。当然，肯定会对某些人没有价值，他们早就知道了，但就算你再厉害，也总是有人比你厉害的，不能说因为这些原因就不记录你自己的想法了，你自己思考了之后理解得最深刻，就算有别人想过了，总有人没有想到的。况且，思考成了习惯，你的思考能力也会越来越强，你的文章也会越来越有价值。重复，无论你面临什么困惑，总会有很多人同样面临过，于是你苦苦思索之后的结果，肯定会对很多人有意义。\n\n&emsp;&emsp;或者，你想通了之后觉得其实也很简单于是不愿意或者不好意思写了，但要知道，问题在想通了之后总是简单的，问题的困难程度不在于想通了之后还觉得有多难，而在于从你觉得它难到你觉得它简单需要耗费多少思维体力，你耗费的时间越长，说明有越多的人最终还是没有想明白（路越长走到底的人越少）。\n\n&emsp;&emsp;最后，虽然我现在看一年前的文章觉得挺不成熟，但是如果没有那些不成熟的思考，也不会有现在更成熟的思考，我几年后来看现在写的东西，还是会觉得不成熟。\n\n### 2.担心想法太幼稚或有漏洞等等被别人笑话\n&emsp;&emsp;人非圣贤。正是因为单个人的想法总是有漏洞，才值得拿出来交流（《书写是更好的思考》，讨论是绝佳的反思），被别人指出问题正是改进的空间，藏着掖着的想法永远不可能变得更成熟。\n\n&emsp;&emsp;Much of intelligence is knowledge，有这么一个非常发人深省的经典心理学实验[4]：\n\n&emsp;&emsp;将孩子们分成两组，通过给他们不同的阅读材料让一组相信智力是天生的，不可在后天改变的，另一组则让他们相信智力其实只是知识和技能的代名词，完全是后天习得的。接下来让他们做一组任务，那些被相信智力天生说的孩子，倾向于回避困难的任务，选择较容易的任务，这里的逻辑想必是这样的：如果做困难的任务，就增大了失败的几率，就在降低了自己在别人和自己心目中的智力的值。为了保护这个智力的值不被降低，应该避免那些有失败风险的项目。而另一组孩子则对于有挑战性的事情跃跃欲试，并且在失败的时候明显没有前者沮丧，因为失败也是学得新的东西，不管怎样都是“智力”的提高。\n\n&emsp;&emsp;况且，只会批判乃至嘲笑别人的人是最不知道怎么建设的人，忽略他们。\n\n### 3.得不到激励\n&emsp;&emsp;这其实是个最无聊的问题了，只有写碎碎念的博客才会面对“激励”的问题。如果写自己的总结，写自己独立的思考，那么书写下来、理解通透，本身就是一个极大的激励。就算放在自己的私密笔记本里面也一样有成就感。况且，如果你真做到了书写价值博客，那么绝对不用担心你的观点得不到传播，也许一开始会耗时长一点，但是这在任何事情上都是必要的初始阶段，Gmail小组的核心人物、FriendFeed创始人Paul Buchheit，和编程界名博Coding Horror的博主Jeff Atwood都曾经感叹过：Overnight success takes a long time （(1)，(2)），不过对于价值博客来说，现在网络上的聚合类服务这么多，机器的、人肉的、半人肉的都有，情况又要好得多了，而且我相信情况还会越来越好。\n\n### 4.写不出来\n&emsp;&emsp;这个问题也比较无聊，思考本不是一件急于求成的事情。长期订阅我的博客的朋友知道我一般发文频率在一个月三五篇，实际上有不少次我个把月也不发布文章，原因很简单，要么是有手头的事情要处理思考的时间被压缩了，要么是遇到比较大或者比较困难的问题需要长时间的思考和积淀，没有关系，如果没有想清楚就再想想，爱思考的人和不爱思考的人有一个本质的区别，前者在生活中总是挂着几个问题在大脑中，它们时常都会冒出来骚扰你一下，让你琢磨琢磨，不爱思考的则是没事不主动想问题，遇到问题还要先想想是否能找捷径（找人帮忙）解决。\n\n&emsp;&emsp;无论如何，不用急于求成，在一个主题上深入下去思考，总能挖到别人挖不到的角落。你能让一个问题在大脑中停留的时间越长，就越是能够发现新的东西，一般来说，我认为有价值的问题我会让他在意识或潜意识中待短则一个星期，长则一个月（视问题大小而定），利用走路吃饭的时间琢磨（我发现很多我佩服的人也都有这个习惯），有时即便已经想通了写下来了发出去了，大脑仍然还是会在回味问题，还没有把它撤出潜意识，然后看到某篇文章或某本书的时候忽然又有所新的感悟。\n\n&emsp;&emsp;能够把问题长时间停靠在潜意识中是一种技能，能够带来很大的好处，停留得越长你越琢磨得透彻，比别人看到的就越多。我们必须要带着问题的眼镜看待事物才能发现新的视角，否则就会出现视而不见效应，别的不说，广为人知的例子是阿基米德的“尤里卡！”，如果不是长时间琢磨着一个问题，一直把它放在思维中，是不会从洗澡领悟到“排水测体积”的，否则他洗了那么多年澡怎么不早发现呢？[5]\n\n&emsp;&emsp;所以，如果你习惯了思考问题，就总会有东西写，先有思考，然后有总结，然后在总结中进一步思考。\n\n&emsp;&emsp;当然你也可以试试把不成熟的想法写下来，试图整理成条理清晰的文字，然后看看能否在整理的过程中走得更远。这往往是可行的。比如这篇文章在我的简记里面原本其实只有三行字（包含大约十来个备忘关键词），而最初在我的大脑里面其实只有一个走路时冒出来的问题——为什么要写博客？\n\n","source":"_posts/为什么要写博客.md","raw":"---\ntitle: 为什么要写博客\ndate: 2018-09-01 15:06:41\ncategories:\n- Diary\ntags:\n- blog\n---\n## 为什么要写博客？\n摘自[[BetterExplained]为什么你应该（从现在开始就）写博客](http://mindhacks.cn/2009/02/15/why-you-should-start-blogging-now/)\n用一句话来说就是，写一个博客有很多好处，却没有任何明显的坏处。\n\n用博客的形式来记录下你有价值的思考，会带来很多好处，却没有任何明显的坏处。\nPS：碎碎念不算思考、心情琐记不算思考、唠唠叨叨也不算思考、没话找话也不算思考，请以此类推。\n\n<!--more-->\n\n写一个长期的价值博客的最大的几点好处：\n### 1.能够交到很多志同道合的朋友\n&emsp;&emsp;我自己既写博客，也读别人的博客，在这个时代，对于生活中的绝大多数人来说，拓宽朋友圈子的途径几乎只有一个，通过网络，而如何在网络中寻找到气味相投的朋友，如何判断别人和自己是否有共同语言？显然，通过天天在SNS上碎碎念的那些日记是难以做到的。我佩服的一些朋友几乎全都是长期用博客记录想法的人，因此，和他们即便不打照面，也是心照不宣。即便素未谋面也能坐下来就聊得热火朝天。\n\n&emsp;&emsp;为什么博客在结交志同道合的朋友方面的潜力要远胜于原始的交谈方式？很简单，第一，博客无地域限制，整个互联网上从A到B只有一个点击的距离，而传统的建立朋友圈子的方法则受到地域限制。第二，也是更重要的一点，即如果按照以前结交朋友的方式，需要互相聊天，交流观点，然后才逐渐熟悉起来，这需要一个较长的过程，而且更糟糕的是，当你遇到另一个陌生人，又要把整个过程重复一次，表达你已经对老友表达过的那番想法。可博客却做到了“一次表达，无数次阅读”，当我看到一个写了好几年的博客，看完了之后我仿佛和这个人交谈了很久，用程序员们喜欢听的话来说就是，“博客极大地增强了话语的复用性”。\n\n\n### 2.书写是为了更好的思考\n我在《书写是为了更好的思考》里面详细总结了书写的好处，这里就不拷贝粘贴了。有些想法如果不写下来，也就忘掉了，有一个广为流传的《数学牛人们的轶事》（荣耀属于ukim）里面讲了希尔伯特的一个故事：一次在Hilbert的讨论班上，一个年轻人报告，其中用了一个很漂亮的定理，Hilbert说“这真是一个妙不可言（wunderbaschon）的定理呀,是谁发现的？”那个年轻人茫然的站了很久，对Hilbert说：“是你.……”。\n\n### 3.“教”是最好的“学”\n&emsp;&emsp;如果一件事情你不能讲清楚，十有八九你还没有完全理解。绝大多数人应该都知道在程序员行业面试官经常要求你讲解一个东西给他听，他会说他不懂这个东西（他如果真的不懂的话效果其实是最好的），而你的任务则是说到让他理解为止。\n\n&emsp;&emsp;为了让一个不明白的人做到明白，你必须要知道从明白到不明白他究竟需要掌握哪些概念，这就迫使我们对我们大脑中整个的知识体系来个寻根究底，把藏在水面之下的那些东西统统挖出来，把大脑中的那些我们知道、但不知道自己知道的潜在概念或假设（assumptions）都挖出来，把它们从内隐记忆拉扯到外显记忆中。因为只有完全知道、并知道自己知道一切来龙去脉的人，才能真正把一件事情讲得通通透透。\n\n&emsp;&emsp;但是，你可能会怀疑，那除了能够讲清楚之外，弄清自己到底知道哪些东西还有其他什么好处吗？如果没有其他好处，那我又何必费这个劲呢？我又不当老师。\n\n\n&emsp;&emsp;我们的绝大多数知识在绝大多数时候都隐藏在潜意识中，其实我们意识的窗口很小，我们的工作记忆只能容纳寥寥数个条目（记得那个“看你能够记住屏幕上同时闪现的多少个数字”的flash小游戏吗？），我们平时所作的推理过程很大部分都是自动的，发生在潜意识中，而我们只能感知到一些中间结论。不信你回忆一下你在和别人讨论问题的时候有多少次觉得“反正就是这样，我感觉得到它是对的，但是你问我，我也说不清到底怎么回事”，对此你不觉得很奇怪吗？如果你都不能从逻辑上支持你的结论，你怎么就能确信它是对的呢？仅仅因为你的直觉强烈地告诉你它是对的？那如果旁边有另一个人，他和你持相反的观念，而他的直觉也强烈地告诉他他是对的。这时候你又怎么想？“他的直觉错了，我的直觉是对的”？难道你这么自信你的直觉是世界上最可靠的？\n\n&emsp;&emsp;我自己则是非常珍惜类似这样的机会，即当“我强烈地觉得它是对的，但我却说不出所以然来”，这时候往往是到大脑中翻箱倒柜的时候，弄清来龙去脉的时候，深入反思的时候，纠正一直以来错误的潜在前提假设的时候。另一方面，“我强烈地觉得这个说法有问题，但我却说不清它为什么有问题，到底哪有问题”，这也是一个极有意义的瞬间，它几乎总是意味着你对一个问题的认识有潜在的偏差，肯定是在你自己都没有觉知到的地方引入了一个潜在的假设、偷换了一个重要的概念，等等。而这种时候就是深入反思的时候，当你终于潜到问题的底层，触摸到问题的实质，把水面之下的冰山整体看清了的时候你会有一种通体舒泰的感觉。\n\n&emsp;&emsp;为什么说以上这些？因为刚才说的是你必须等待这样的反思机会，但如果你选择经常总结自己的知识体系，并说出来给你的读者听，你就会发现你自己创造了这样的机会。如果我们平时不反思，我们觉得很多事情都是当然的，但结果如果要你一开口说给别人听，常常会发现事情就开始变得不那么明显了，你说着说着，就开始莫名其妙地发现自己需要用到“反正”这个词了。\n\n&emsp;&emsp;于是，反思的机会就来了。\n\n&emsp;&emsp;一旦你把自己潜意识里面的东西从幕后拉出来，你就有了面对并反思它们的可能，而不是任它们在幕后阴险地左右你的思维。很多时候我们的思路出了问题并不是我们不会反思，而是不知道自己的思维中有那些隐含的假设（assumptions），如果你只感觉到答案，却不知道你大脑得到这个答案之前做了哪些推理，你又怎么知道哪一环可能出了问题呢？另一方面，一旦你弄清了自己到底是怎么想的，离意识到问题就不远了，很简单的道理——如果别人和你争辩的时候总是只摆立场，你就很难和他辩，但如果他把自己的推理过程原原本本暴露给你，批判起来总是容易得多的。（也正因为这个原因有很多人总是把逻辑藏在背后，不敢暴露出来）\n\n&emsp;&emsp;绝大多数时候其实我们都会不假思索地得出一些结论，就像上了发条的自动机，但其实我们并不知道这些结论到底怎么来的，在思维的背后到底发生了哪些事情，故而当我们发现我们的结论错了的时候，一头雾水，没法着手寻找到底在哪错了。如果你注意一下很多人的发言（论坛、博客等等），如果你把他们的发言分为“前提”、“假设”、“逻辑”、“结论”这四个部分，你会发现一大堆人只会不停地下结论，摆立场，却见不到这些结论或离场的前提、假设和个中逻辑，倒也不是他们不愿意写出逻辑，而是因为反思自己的思维过程实在是一件困难非常的事情，我们的推理过程很大一部分发生在意识的水面之下，只有当有了重要结论的时候这条逻辑链才会浮出来冒一个泡，让我们的意识捕捉到。更何况绝大多数时候我们用的其实并不是完整严密的逻辑思维，而是思维捷径。\n\n> 去教一个完全不懂的人，则是一种最最强大和彻底的反思途径——因为他没有任何预备的知识，所以要让他弄懂你所知道的，你就必须彻底反思你的知识体系，弄清这座大厦的根基在什么地方，弄清它的骨架在什么地方，一砖一瓦到底是怎么垒起来的，你不能自己站在11层上，然后假设你的读者站在第10层，指望着只要告诉他第11层有那些内容就让他明白。你的读者站在第一层，你必须知道你脚下踩着的另外10层到底是怎么构造的。这就迫使你对你所掌握的、或之前认为正确的那些东西作彻彻底底的、深刻的反思，你的受众越是不懂，你需要反思得就越深刻。\n\n### 4.讨论是绝佳的反思\n&emsp;&emsp;另一方面，很多时候我们并不是有机会说给完全不懂的人听，更大的可能性是说给同领域有一定基础的人听，这个时候并不代表就不能促使反思了，实际上，你会发现，如果你公开你的想法，几乎总能看到与你持不同意见的人，然后你通过比较你和他的观念之间的差别，会发现你们在一开始的思路上就存在差异，差异从哪里来的？在进一步讨论中你们就会不断地迫使对方拿出更深层次的理由，这同样也是一种非常有效地促使自己反思的方法，在讨论的过程中双方的理由自然会变得越来越深入，越来越接近问题的本质，一些平时难以注意到的深层面的差异性就会逐渐浮现出来，你也就多了一次难得的机会去审视自己的思维中到底存放了哪些错误的信息。\n\n### 5.激励你去持续学习和思考\n&emsp;&emsp;如果你没有持续学习和思考的习惯，你的博客很快就会没有内容可写，就只能整点碎碎念或者转载，然后你就会失去读者，然后你就会关掉博客，然后一旦关掉博客之后你也就死了写博客的心，然后就少了一条激励你去思考和总结的途径，然后你变得更不高兴总结和思考，然后…\n\n&emsp;&emsp;为了打破这个死循环，不要永久停止更新你的博客，就算你两个月，三个月都不写，只要你每篇都是写自己思考的产物，写有价值的东西，在互联网上，金子的确总是会发光的，因为有无数的信息聚合平台在期待这些有价值的内容，有搜索引擎为你的内容提供海量的潜在读者，有海量的人肉在手动挖掘和转载那些有价值的东西。我们所能做的最差的一个决策莫过于停止做一件没有任何坏处，却有一大堆好处的事情。\n\n&emsp;&emsp;为了让你的博客有价值，你必须不断总结自己学习的结果，你必须不断思考，给出比别人深刻、独到的见解。这看起来有点本末倒置，但很快本和末就会正过来。\n\n### 6.学会持之以恒地做一件事情\n&emsp;&emsp;很多人在生活中容易觉得迷失，不知道想要做什么，是因为没有一件能够持续地做的事情，用俗话来说就是没有主心骨。用积极心理学的话来说就是没有一件能够创造流体验的事情，而书写自己的思想则是一件容易产生流体验的事情，在书写的时候，特别是理性地书写的时候，大脑逐渐进入推理分析模块，一切不愉快的情绪，烦躁感都会逐渐消隐下去。不过前提是你得开始，并且坚持过一开始的困难期，以后的一切便成了习惯成自然。\n\n### 7.一个长期的价值博客是一份很好的简历\n&emsp;&emsp;这里的“简历”并非是狭义上的求职简历，毕竟现在还没有到价值博客的时代，很多人写博客都是到处转载或者干脆碎碎念，正因此面试官未必拿个人博客当成了解一个人的更可靠窗口。这里的“简历”是指一个让别人了解自己的窗口，虽然我们未必做得到像罗永浩、Keso这样的博客，个人的影响力已经足以支撑出一份事业（牛博和5gme），但至少你会因此而结识更多的人，你的博客价值越高，你结识的人就越牛，跟牛人交流又会让你的眼界得到极大的开阔，打开一扇又一扇你原本不知道的门，于是你就变得更牛… 这是一个良性循环。\n\n## 怎么做到长期写一个价值博客\n\n&emsp;&emsp;注意到我并没有说“怎么做到长期**坚持**写一个价值博客”，因为当思考和总结成为习惯之后，诉诸文字以及借助书写来进一步思考就变成了一件自然而然的事情，就变成了一件“因为你在思考和总结从而必须书写下来”的事情，博客就变成了副产品。\n\n&emsp;&emsp;一开始的时候你是因为要写博客而去使劲地思考和总结，指望给出令人眼睛一亮的东西，到了后来，就变成了因为你习惯了思考和总结，因为你意识到书写是更好的思考，你就必须使你的想法成为文字。至此本和末就会各归原位，不再颠倒。\n\n&emsp;&emsp;怎样做到长期写一个价值博客？也许有人会给出很多有趣有用的小技巧来提供动机和激励，譬如如何做SEO，如何鼓励读者留言等等，但是这些我都不想说，我只想说最最重要的，那就是：\n\n> 让你自己成为一个持续学习和思考的人，并只写你真正思考和总结之后的产物，其他一切就会随之而来。\n\n&emsp;&emsp;就像那句经常被人传阅的话：只做你最感兴趣的事情，钱会随之而来[2]。\n\n&emsp;&emsp;这方面的具体例子大家可以留意一下，随处可见，就不一一举了。我想再重复一下的是，千万不要碎碎念，我能理解每个人都想偶尔发发牢骚的冲动，但是现在已经有了一个很好的窗口：twitter，所以立即停止在你的博客上碎碎念，阅读博客的人希望得到信息而非噪音。如果实在忍不住想碎碎念的话不妨换一下位置，这么来告诉自己：如果你看到别人博客来上这么一段，你会有兴趣看吗？\n\n## 可能出现的问题以及怎样应付\n\n&emsp;&emsp;即便上文给出了N条写博客的理由，但有时候只要一条不写的理由就会让人停止做一件事情。所以我特别加上一节“可能出现的问题以及怎样应付”，《影响力2》[3]第五章雄辩地证明，“Much of Will is Skill”，意志力很大程度上来源于有正确的方法，而非天生。\n\n### 1.担心别人认为没有价值\n&emsp;&emsp;事实是，你面临过的问题总会有人面临过，你独立思考了，别人没有，你的文章对他们就会有价值。当然，肯定会对某些人没有价值，他们早就知道了，但就算你再厉害，也总是有人比你厉害的，不能说因为这些原因就不记录你自己的想法了，你自己思考了之后理解得最深刻，就算有别人想过了，总有人没有想到的。况且，思考成了习惯，你的思考能力也会越来越强，你的文章也会越来越有价值。重复，无论你面临什么困惑，总会有很多人同样面临过，于是你苦苦思索之后的结果，肯定会对很多人有意义。\n\n&emsp;&emsp;或者，你想通了之后觉得其实也很简单于是不愿意或者不好意思写了，但要知道，问题在想通了之后总是简单的，问题的困难程度不在于想通了之后还觉得有多难，而在于从你觉得它难到你觉得它简单需要耗费多少思维体力，你耗费的时间越长，说明有越多的人最终还是没有想明白（路越长走到底的人越少）。\n\n&emsp;&emsp;最后，虽然我现在看一年前的文章觉得挺不成熟，但是如果没有那些不成熟的思考，也不会有现在更成熟的思考，我几年后来看现在写的东西，还是会觉得不成熟。\n\n### 2.担心想法太幼稚或有漏洞等等被别人笑话\n&emsp;&emsp;人非圣贤。正是因为单个人的想法总是有漏洞，才值得拿出来交流（《书写是更好的思考》，讨论是绝佳的反思），被别人指出问题正是改进的空间，藏着掖着的想法永远不可能变得更成熟。\n\n&emsp;&emsp;Much of intelligence is knowledge，有这么一个非常发人深省的经典心理学实验[4]：\n\n&emsp;&emsp;将孩子们分成两组，通过给他们不同的阅读材料让一组相信智力是天生的，不可在后天改变的，另一组则让他们相信智力其实只是知识和技能的代名词，完全是后天习得的。接下来让他们做一组任务，那些被相信智力天生说的孩子，倾向于回避困难的任务，选择较容易的任务，这里的逻辑想必是这样的：如果做困难的任务，就增大了失败的几率，就在降低了自己在别人和自己心目中的智力的值。为了保护这个智力的值不被降低，应该避免那些有失败风险的项目。而另一组孩子则对于有挑战性的事情跃跃欲试，并且在失败的时候明显没有前者沮丧，因为失败也是学得新的东西，不管怎样都是“智力”的提高。\n\n&emsp;&emsp;况且，只会批判乃至嘲笑别人的人是最不知道怎么建设的人，忽略他们。\n\n### 3.得不到激励\n&emsp;&emsp;这其实是个最无聊的问题了，只有写碎碎念的博客才会面对“激励”的问题。如果写自己的总结，写自己独立的思考，那么书写下来、理解通透，本身就是一个极大的激励。就算放在自己的私密笔记本里面也一样有成就感。况且，如果你真做到了书写价值博客，那么绝对不用担心你的观点得不到传播，也许一开始会耗时长一点，但是这在任何事情上都是必要的初始阶段，Gmail小组的核心人物、FriendFeed创始人Paul Buchheit，和编程界名博Coding Horror的博主Jeff Atwood都曾经感叹过：Overnight success takes a long time （(1)，(2)），不过对于价值博客来说，现在网络上的聚合类服务这么多，机器的、人肉的、半人肉的都有，情况又要好得多了，而且我相信情况还会越来越好。\n\n### 4.写不出来\n&emsp;&emsp;这个问题也比较无聊，思考本不是一件急于求成的事情。长期订阅我的博客的朋友知道我一般发文频率在一个月三五篇，实际上有不少次我个把月也不发布文章，原因很简单，要么是有手头的事情要处理思考的时间被压缩了，要么是遇到比较大或者比较困难的问题需要长时间的思考和积淀，没有关系，如果没有想清楚就再想想，爱思考的人和不爱思考的人有一个本质的区别，前者在生活中总是挂着几个问题在大脑中，它们时常都会冒出来骚扰你一下，让你琢磨琢磨，不爱思考的则是没事不主动想问题，遇到问题还要先想想是否能找捷径（找人帮忙）解决。\n\n&emsp;&emsp;无论如何，不用急于求成，在一个主题上深入下去思考，总能挖到别人挖不到的角落。你能让一个问题在大脑中停留的时间越长，就越是能够发现新的东西，一般来说，我认为有价值的问题我会让他在意识或潜意识中待短则一个星期，长则一个月（视问题大小而定），利用走路吃饭的时间琢磨（我发现很多我佩服的人也都有这个习惯），有时即便已经想通了写下来了发出去了，大脑仍然还是会在回味问题，还没有把它撤出潜意识，然后看到某篇文章或某本书的时候忽然又有所新的感悟。\n\n&emsp;&emsp;能够把问题长时间停靠在潜意识中是一种技能，能够带来很大的好处，停留得越长你越琢磨得透彻，比别人看到的就越多。我们必须要带着问题的眼镜看待事物才能发现新的视角，否则就会出现视而不见效应，别的不说，广为人知的例子是阿基米德的“尤里卡！”，如果不是长时间琢磨着一个问题，一直把它放在思维中，是不会从洗澡领悟到“排水测体积”的，否则他洗了那么多年澡怎么不早发现呢？[5]\n\n&emsp;&emsp;所以，如果你习惯了思考问题，就总会有东西写，先有思考，然后有总结，然后在总结中进一步思考。\n\n&emsp;&emsp;当然你也可以试试把不成熟的想法写下来，试图整理成条理清晰的文字，然后看看能否在整理的过程中走得更远。这往往是可行的。比如这篇文章在我的简记里面原本其实只有三行字（包含大约十来个备忘关键词），而最初在我的大脑里面其实只有一个走路时冒出来的问题——为什么要写博客？\n\n","slug":"为什么要写博客","published":1,"updated":"2018-09-01T08:43:40.998Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmqc02le000b1ouorr28xxbj","content":"<h2 id=\"为什么要写博客？\"><a href=\"#为什么要写博客？\" class=\"headerlink\" title=\"为什么要写博客？\"></a>为什么要写博客？</h2><p>摘自<a href=\"http://mindhacks.cn/2009/02/15/why-you-should-start-blogging-now/\" target=\"_blank\" rel=\"noopener\">[BetterExplained]为什么你应该（从现在开始就）写博客</a><br>用一句话来说就是，写一个博客有很多好处，却没有任何明显的坏处。</p>\n<p>用博客的形式来记录下你有价值的思考，会带来很多好处，却没有任何明显的坏处。<br>PS：碎碎念不算思考、心情琐记不算思考、唠唠叨叨也不算思考、没话找话也不算思考，请以此类推。</p>\n<a id=\"more\"></a>\n<p>写一个长期的价值博客的最大的几点好处：</p>\n<h3 id=\"1-能够交到很多志同道合的朋友\"><a href=\"#1-能够交到很多志同道合的朋友\" class=\"headerlink\" title=\"1.能够交到很多志同道合的朋友\"></a>1.能够交到很多志同道合的朋友</h3><p>&emsp;&emsp;我自己既写博客，也读别人的博客，在这个时代，对于生活中的绝大多数人来说，拓宽朋友圈子的途径几乎只有一个，通过网络，而如何在网络中寻找到气味相投的朋友，如何判断别人和自己是否有共同语言？显然，通过天天在SNS上碎碎念的那些日记是难以做到的。我佩服的一些朋友几乎全都是长期用博客记录想法的人，因此，和他们即便不打照面，也是心照不宣。即便素未谋面也能坐下来就聊得热火朝天。</p>\n<p>&emsp;&emsp;为什么博客在结交志同道合的朋友方面的潜力要远胜于原始的交谈方式？很简单，第一，博客无地域限制，整个互联网上从A到B只有一个点击的距离，而传统的建立朋友圈子的方法则受到地域限制。第二，也是更重要的一点，即如果按照以前结交朋友的方式，需要互相聊天，交流观点，然后才逐渐熟悉起来，这需要一个较长的过程，而且更糟糕的是，当你遇到另一个陌生人，又要把整个过程重复一次，表达你已经对老友表达过的那番想法。可博客却做到了“一次表达，无数次阅读”，当我看到一个写了好几年的博客，看完了之后我仿佛和这个人交谈了很久，用程序员们喜欢听的话来说就是，“博客极大地增强了话语的复用性”。</p>\n<h3 id=\"2-书写是为了更好的思考\"><a href=\"#2-书写是为了更好的思考\" class=\"headerlink\" title=\"2.书写是为了更好的思考\"></a>2.书写是为了更好的思考</h3><p>我在《书写是为了更好的思考》里面详细总结了书写的好处，这里就不拷贝粘贴了。有些想法如果不写下来，也就忘掉了，有一个广为流传的《数学牛人们的轶事》（荣耀属于ukim）里面讲了希尔伯特的一个故事：一次在Hilbert的讨论班上，一个年轻人报告，其中用了一个很漂亮的定理，Hilbert说“这真是一个妙不可言（wunderbaschon）的定理呀,是谁发现的？”那个年轻人茫然的站了很久，对Hilbert说：“是你.……”。</p>\n<h3 id=\"3-“教”是最好的“学”\"><a href=\"#3-“教”是最好的“学”\" class=\"headerlink\" title=\"3.“教”是最好的“学”\"></a>3.“教”是最好的“学”</h3><p>&emsp;&emsp;如果一件事情你不能讲清楚，十有八九你还没有完全理解。绝大多数人应该都知道在程序员行业面试官经常要求你讲解一个东西给他听，他会说他不懂这个东西（他如果真的不懂的话效果其实是最好的），而你的任务则是说到让他理解为止。</p>\n<p>&emsp;&emsp;为了让一个不明白的人做到明白，你必须要知道从明白到不明白他究竟需要掌握哪些概念，这就迫使我们对我们大脑中整个的知识体系来个寻根究底，把藏在水面之下的那些东西统统挖出来，把大脑中的那些我们知道、但不知道自己知道的潜在概念或假设（assumptions）都挖出来，把它们从内隐记忆拉扯到外显记忆中。因为只有完全知道、并知道自己知道一切来龙去脉的人，才能真正把一件事情讲得通通透透。</p>\n<p>&emsp;&emsp;但是，你可能会怀疑，那除了能够讲清楚之外，弄清自己到底知道哪些东西还有其他什么好处吗？如果没有其他好处，那我又何必费这个劲呢？我又不当老师。</p>\n<p>&emsp;&emsp;我们的绝大多数知识在绝大多数时候都隐藏在潜意识中，其实我们意识的窗口很小，我们的工作记忆只能容纳寥寥数个条目（记得那个“看你能够记住屏幕上同时闪现的多少个数字”的flash小游戏吗？），我们平时所作的推理过程很大部分都是自动的，发生在潜意识中，而我们只能感知到一些中间结论。不信你回忆一下你在和别人讨论问题的时候有多少次觉得“反正就是这样，我感觉得到它是对的，但是你问我，我也说不清到底怎么回事”，对此你不觉得很奇怪吗？如果你都不能从逻辑上支持你的结论，你怎么就能确信它是对的呢？仅仅因为你的直觉强烈地告诉你它是对的？那如果旁边有另一个人，他和你持相反的观念，而他的直觉也强烈地告诉他他是对的。这时候你又怎么想？“他的直觉错了，我的直觉是对的”？难道你这么自信你的直觉是世界上最可靠的？</p>\n<p>&emsp;&emsp;我自己则是非常珍惜类似这样的机会，即当“我强烈地觉得它是对的，但我却说不出所以然来”，这时候往往是到大脑中翻箱倒柜的时候，弄清来龙去脉的时候，深入反思的时候，纠正一直以来错误的潜在前提假设的时候。另一方面，“我强烈地觉得这个说法有问题，但我却说不清它为什么有问题，到底哪有问题”，这也是一个极有意义的瞬间，它几乎总是意味着你对一个问题的认识有潜在的偏差，肯定是在你自己都没有觉知到的地方引入了一个潜在的假设、偷换了一个重要的概念，等等。而这种时候就是深入反思的时候，当你终于潜到问题的底层，触摸到问题的实质，把水面之下的冰山整体看清了的时候你会有一种通体舒泰的感觉。</p>\n<p>&emsp;&emsp;为什么说以上这些？因为刚才说的是你必须等待这样的反思机会，但如果你选择经常总结自己的知识体系，并说出来给你的读者听，你就会发现你自己创造了这样的机会。如果我们平时不反思，我们觉得很多事情都是当然的，但结果如果要你一开口说给别人听，常常会发现事情就开始变得不那么明显了，你说着说着，就开始莫名其妙地发现自己需要用到“反正”这个词了。</p>\n<p>&emsp;&emsp;于是，反思的机会就来了。</p>\n<p>&emsp;&emsp;一旦你把自己潜意识里面的东西从幕后拉出来，你就有了面对并反思它们的可能，而不是任它们在幕后阴险地左右你的思维。很多时候我们的思路出了问题并不是我们不会反思，而是不知道自己的思维中有那些隐含的假设（assumptions），如果你只感觉到答案，却不知道你大脑得到这个答案之前做了哪些推理，你又怎么知道哪一环可能出了问题呢？另一方面，一旦你弄清了自己到底是怎么想的，离意识到问题就不远了，很简单的道理——如果别人和你争辩的时候总是只摆立场，你就很难和他辩，但如果他把自己的推理过程原原本本暴露给你，批判起来总是容易得多的。（也正因为这个原因有很多人总是把逻辑藏在背后，不敢暴露出来）</p>\n<p>&emsp;&emsp;绝大多数时候其实我们都会不假思索地得出一些结论，就像上了发条的自动机，但其实我们并不知道这些结论到底怎么来的，在思维的背后到底发生了哪些事情，故而当我们发现我们的结论错了的时候，一头雾水，没法着手寻找到底在哪错了。如果你注意一下很多人的发言（论坛、博客等等），如果你把他们的发言分为“前提”、“假设”、“逻辑”、“结论”这四个部分，你会发现一大堆人只会不停地下结论，摆立场，却见不到这些结论或离场的前提、假设和个中逻辑，倒也不是他们不愿意写出逻辑，而是因为反思自己的思维过程实在是一件困难非常的事情，我们的推理过程很大一部分发生在意识的水面之下，只有当有了重要结论的时候这条逻辑链才会浮出来冒一个泡，让我们的意识捕捉到。更何况绝大多数时候我们用的其实并不是完整严密的逻辑思维，而是思维捷径。</p>\n<blockquote>\n<p>去教一个完全不懂的人，则是一种最最强大和彻底的反思途径——因为他没有任何预备的知识，所以要让他弄懂你所知道的，你就必须彻底反思你的知识体系，弄清这座大厦的根基在什么地方，弄清它的骨架在什么地方，一砖一瓦到底是怎么垒起来的，你不能自己站在11层上，然后假设你的读者站在第10层，指望着只要告诉他第11层有那些内容就让他明白。你的读者站在第一层，你必须知道你脚下踩着的另外10层到底是怎么构造的。这就迫使你对你所掌握的、或之前认为正确的那些东西作彻彻底底的、深刻的反思，你的受众越是不懂，你需要反思得就越深刻。</p>\n</blockquote>\n<h3 id=\"4-讨论是绝佳的反思\"><a href=\"#4-讨论是绝佳的反思\" class=\"headerlink\" title=\"4.讨论是绝佳的反思\"></a>4.讨论是绝佳的反思</h3><p>&emsp;&emsp;另一方面，很多时候我们并不是有机会说给完全不懂的人听，更大的可能性是说给同领域有一定基础的人听，这个时候并不代表就不能促使反思了，实际上，你会发现，如果你公开你的想法，几乎总能看到与你持不同意见的人，然后你通过比较你和他的观念之间的差别，会发现你们在一开始的思路上就存在差异，差异从哪里来的？在进一步讨论中你们就会不断地迫使对方拿出更深层次的理由，这同样也是一种非常有效地促使自己反思的方法，在讨论的过程中双方的理由自然会变得越来越深入，越来越接近问题的本质，一些平时难以注意到的深层面的差异性就会逐渐浮现出来，你也就多了一次难得的机会去审视自己的思维中到底存放了哪些错误的信息。</p>\n<h3 id=\"5-激励你去持续学习和思考\"><a href=\"#5-激励你去持续学习和思考\" class=\"headerlink\" title=\"5.激励你去持续学习和思考\"></a>5.激励你去持续学习和思考</h3><p>&emsp;&emsp;如果你没有持续学习和思考的习惯，你的博客很快就会没有内容可写，就只能整点碎碎念或者转载，然后你就会失去读者，然后你就会关掉博客，然后一旦关掉博客之后你也就死了写博客的心，然后就少了一条激励你去思考和总结的途径，然后你变得更不高兴总结和思考，然后…</p>\n<p>&emsp;&emsp;为了打破这个死循环，不要永久停止更新你的博客，就算你两个月，三个月都不写，只要你每篇都是写自己思考的产物，写有价值的东西，在互联网上，金子的确总是会发光的，因为有无数的信息聚合平台在期待这些有价值的内容，有搜索引擎为你的内容提供海量的潜在读者，有海量的人肉在手动挖掘和转载那些有价值的东西。我们所能做的最差的一个决策莫过于停止做一件没有任何坏处，却有一大堆好处的事情。</p>\n<p>&emsp;&emsp;为了让你的博客有价值，你必须不断总结自己学习的结果，你必须不断思考，给出比别人深刻、独到的见解。这看起来有点本末倒置，但很快本和末就会正过来。</p>\n<h3 id=\"6-学会持之以恒地做一件事情\"><a href=\"#6-学会持之以恒地做一件事情\" class=\"headerlink\" title=\"6.学会持之以恒地做一件事情\"></a>6.学会持之以恒地做一件事情</h3><p>&emsp;&emsp;很多人在生活中容易觉得迷失，不知道想要做什么，是因为没有一件能够持续地做的事情，用俗话来说就是没有主心骨。用积极心理学的话来说就是没有一件能够创造流体验的事情，而书写自己的思想则是一件容易产生流体验的事情，在书写的时候，特别是理性地书写的时候，大脑逐渐进入推理分析模块，一切不愉快的情绪，烦躁感都会逐渐消隐下去。不过前提是你得开始，并且坚持过一开始的困难期，以后的一切便成了习惯成自然。</p>\n<h3 id=\"7-一个长期的价值博客是一份很好的简历\"><a href=\"#7-一个长期的价值博客是一份很好的简历\" class=\"headerlink\" title=\"7.一个长期的价值博客是一份很好的简历\"></a>7.一个长期的价值博客是一份很好的简历</h3><p>&emsp;&emsp;这里的“简历”并非是狭义上的求职简历，毕竟现在还没有到价值博客的时代，很多人写博客都是到处转载或者干脆碎碎念，正因此面试官未必拿个人博客当成了解一个人的更可靠窗口。这里的“简历”是指一个让别人了解自己的窗口，虽然我们未必做得到像罗永浩、Keso这样的博客，个人的影响力已经足以支撑出一份事业（牛博和5gme），但至少你会因此而结识更多的人，你的博客价值越高，你结识的人就越牛，跟牛人交流又会让你的眼界得到极大的开阔，打开一扇又一扇你原本不知道的门，于是你就变得更牛… 这是一个良性循环。</p>\n<h2 id=\"怎么做到长期写一个价值博客\"><a href=\"#怎么做到长期写一个价值博客\" class=\"headerlink\" title=\"怎么做到长期写一个价值博客\"></a>怎么做到长期写一个价值博客</h2><p>&emsp;&emsp;注意到我并没有说“怎么做到长期<strong>坚持</strong>写一个价值博客”，因为当思考和总结成为习惯之后，诉诸文字以及借助书写来进一步思考就变成了一件自然而然的事情，就变成了一件“因为你在思考和总结从而必须书写下来”的事情，博客就变成了副产品。</p>\n<p>&emsp;&emsp;一开始的时候你是因为要写博客而去使劲地思考和总结，指望给出令人眼睛一亮的东西，到了后来，就变成了因为你习惯了思考和总结，因为你意识到书写是更好的思考，你就必须使你的想法成为文字。至此本和末就会各归原位，不再颠倒。</p>\n<p>&emsp;&emsp;怎样做到长期写一个价值博客？也许有人会给出很多有趣有用的小技巧来提供动机和激励，譬如如何做SEO，如何鼓励读者留言等等，但是这些我都不想说，我只想说最最重要的，那就是：</p>\n<blockquote>\n<p>让你自己成为一个持续学习和思考的人，并只写你真正思考和总结之后的产物，其他一切就会随之而来。</p>\n</blockquote>\n<p>&emsp;&emsp;就像那句经常被人传阅的话：只做你最感兴趣的事情，钱会随之而来[2]。</p>\n<p>&emsp;&emsp;这方面的具体例子大家可以留意一下，随处可见，就不一一举了。我想再重复一下的是，千万不要碎碎念，我能理解每个人都想偶尔发发牢骚的冲动，但是现在已经有了一个很好的窗口：twitter，所以立即停止在你的博客上碎碎念，阅读博客的人希望得到信息而非噪音。如果实在忍不住想碎碎念的话不妨换一下位置，这么来告诉自己：如果你看到别人博客来上这么一段，你会有兴趣看吗？</p>\n<h2 id=\"可能出现的问题以及怎样应付\"><a href=\"#可能出现的问题以及怎样应付\" class=\"headerlink\" title=\"可能出现的问题以及怎样应付\"></a>可能出现的问题以及怎样应付</h2><p>&emsp;&emsp;即便上文给出了N条写博客的理由，但有时候只要一条不写的理由就会让人停止做一件事情。所以我特别加上一节“可能出现的问题以及怎样应付”，《影响力2》[3]第五章雄辩地证明，“Much of Will is Skill”，意志力很大程度上来源于有正确的方法，而非天生。</p>\n<h3 id=\"1-担心别人认为没有价值\"><a href=\"#1-担心别人认为没有价值\" class=\"headerlink\" title=\"1.担心别人认为没有价值\"></a>1.担心别人认为没有价值</h3><p>&emsp;&emsp;事实是，你面临过的问题总会有人面临过，你独立思考了，别人没有，你的文章对他们就会有价值。当然，肯定会对某些人没有价值，他们早就知道了，但就算你再厉害，也总是有人比你厉害的，不能说因为这些原因就不记录你自己的想法了，你自己思考了之后理解得最深刻，就算有别人想过了，总有人没有想到的。况且，思考成了习惯，你的思考能力也会越来越强，你的文章也会越来越有价值。重复，无论你面临什么困惑，总会有很多人同样面临过，于是你苦苦思索之后的结果，肯定会对很多人有意义。</p>\n<p>&emsp;&emsp;或者，你想通了之后觉得其实也很简单于是不愿意或者不好意思写了，但要知道，问题在想通了之后总是简单的，问题的困难程度不在于想通了之后还觉得有多难，而在于从你觉得它难到你觉得它简单需要耗费多少思维体力，你耗费的时间越长，说明有越多的人最终还是没有想明白（路越长走到底的人越少）。</p>\n<p>&emsp;&emsp;最后，虽然我现在看一年前的文章觉得挺不成熟，但是如果没有那些不成熟的思考，也不会有现在更成熟的思考，我几年后来看现在写的东西，还是会觉得不成熟。</p>\n<h3 id=\"2-担心想法太幼稚或有漏洞等等被别人笑话\"><a href=\"#2-担心想法太幼稚或有漏洞等等被别人笑话\" class=\"headerlink\" title=\"2.担心想法太幼稚或有漏洞等等被别人笑话\"></a>2.担心想法太幼稚或有漏洞等等被别人笑话</h3><p>&emsp;&emsp;人非圣贤。正是因为单个人的想法总是有漏洞，才值得拿出来交流（《书写是更好的思考》，讨论是绝佳的反思），被别人指出问题正是改进的空间，藏着掖着的想法永远不可能变得更成熟。</p>\n<p>&emsp;&emsp;Much of intelligence is knowledge，有这么一个非常发人深省的经典心理学实验[4]：</p>\n<p>&emsp;&emsp;将孩子们分成两组，通过给他们不同的阅读材料让一组相信智力是天生的，不可在后天改变的，另一组则让他们相信智力其实只是知识和技能的代名词，完全是后天习得的。接下来让他们做一组任务，那些被相信智力天生说的孩子，倾向于回避困难的任务，选择较容易的任务，这里的逻辑想必是这样的：如果做困难的任务，就增大了失败的几率，就在降低了自己在别人和自己心目中的智力的值。为了保护这个智力的值不被降低，应该避免那些有失败风险的项目。而另一组孩子则对于有挑战性的事情跃跃欲试，并且在失败的时候明显没有前者沮丧，因为失败也是学得新的东西，不管怎样都是“智力”的提高。</p>\n<p>&emsp;&emsp;况且，只会批判乃至嘲笑别人的人是最不知道怎么建设的人，忽略他们。</p>\n<h3 id=\"3-得不到激励\"><a href=\"#3-得不到激励\" class=\"headerlink\" title=\"3.得不到激励\"></a>3.得不到激励</h3><p>&emsp;&emsp;这其实是个最无聊的问题了，只有写碎碎念的博客才会面对“激励”的问题。如果写自己的总结，写自己独立的思考，那么书写下来、理解通透，本身就是一个极大的激励。就算放在自己的私密笔记本里面也一样有成就感。况且，如果你真做到了书写价值博客，那么绝对不用担心你的观点得不到传播，也许一开始会耗时长一点，但是这在任何事情上都是必要的初始阶段，Gmail小组的核心人物、FriendFeed创始人Paul Buchheit，和编程界名博Coding Horror的博主Jeff Atwood都曾经感叹过：Overnight success takes a long time （(1)，(2)），不过对于价值博客来说，现在网络上的聚合类服务这么多，机器的、人肉的、半人肉的都有，情况又要好得多了，而且我相信情况还会越来越好。</p>\n<h3 id=\"4-写不出来\"><a href=\"#4-写不出来\" class=\"headerlink\" title=\"4.写不出来\"></a>4.写不出来</h3><p>&emsp;&emsp;这个问题也比较无聊，思考本不是一件急于求成的事情。长期订阅我的博客的朋友知道我一般发文频率在一个月三五篇，实际上有不少次我个把月也不发布文章，原因很简单，要么是有手头的事情要处理思考的时间被压缩了，要么是遇到比较大或者比较困难的问题需要长时间的思考和积淀，没有关系，如果没有想清楚就再想想，爱思考的人和不爱思考的人有一个本质的区别，前者在生活中总是挂着几个问题在大脑中，它们时常都会冒出来骚扰你一下，让你琢磨琢磨，不爱思考的则是没事不主动想问题，遇到问题还要先想想是否能找捷径（找人帮忙）解决。</p>\n<p>&emsp;&emsp;无论如何，不用急于求成，在一个主题上深入下去思考，总能挖到别人挖不到的角落。你能让一个问题在大脑中停留的时间越长，就越是能够发现新的东西，一般来说，我认为有价值的问题我会让他在意识或潜意识中待短则一个星期，长则一个月（视问题大小而定），利用走路吃饭的时间琢磨（我发现很多我佩服的人也都有这个习惯），有时即便已经想通了写下来了发出去了，大脑仍然还是会在回味问题，还没有把它撤出潜意识，然后看到某篇文章或某本书的时候忽然又有所新的感悟。</p>\n<p>&emsp;&emsp;能够把问题长时间停靠在潜意识中是一种技能，能够带来很大的好处，停留得越长你越琢磨得透彻，比别人看到的就越多。我们必须要带着问题的眼镜看待事物才能发现新的视角，否则就会出现视而不见效应，别的不说，广为人知的例子是阿基米德的“尤里卡！”，如果不是长时间琢磨着一个问题，一直把它放在思维中，是不会从洗澡领悟到“排水测体积”的，否则他洗了那么多年澡怎么不早发现呢？[5]</p>\n<p>&emsp;&emsp;所以，如果你习惯了思考问题，就总会有东西写，先有思考，然后有总结，然后在总结中进一步思考。</p>\n<p>&emsp;&emsp;当然你也可以试试把不成熟的想法写下来，试图整理成条理清晰的文字，然后看看能否在整理的过程中走得更远。这往往是可行的。比如这篇文章在我的简记里面原本其实只有三行字（包含大约十来个备忘关键词），而最初在我的大脑里面其实只有一个走路时冒出来的问题——为什么要写博客？</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"为什么要写博客？\"><a href=\"#为什么要写博客？\" class=\"headerlink\" title=\"为什么要写博客？\"></a>为什么要写博客？</h2><p>摘自<a href=\"http://mindhacks.cn/2009/02/15/why-you-should-start-blogging-now/\" target=\"_blank\" rel=\"noopener\">[BetterExplained]为什么你应该（从现在开始就）写博客</a><br>用一句话来说就是，写一个博客有很多好处，却没有任何明显的坏处。</p>\n<p>用博客的形式来记录下你有价值的思考，会带来很多好处，却没有任何明显的坏处。<br>PS：碎碎念不算思考、心情琐记不算思考、唠唠叨叨也不算思考、没话找话也不算思考，请以此类推。</p>","more":"<p>写一个长期的价值博客的最大的几点好处：</p>\n<h3 id=\"1-能够交到很多志同道合的朋友\"><a href=\"#1-能够交到很多志同道合的朋友\" class=\"headerlink\" title=\"1.能够交到很多志同道合的朋友\"></a>1.能够交到很多志同道合的朋友</h3><p>&emsp;&emsp;我自己既写博客，也读别人的博客，在这个时代，对于生活中的绝大多数人来说，拓宽朋友圈子的途径几乎只有一个，通过网络，而如何在网络中寻找到气味相投的朋友，如何判断别人和自己是否有共同语言？显然，通过天天在SNS上碎碎念的那些日记是难以做到的。我佩服的一些朋友几乎全都是长期用博客记录想法的人，因此，和他们即便不打照面，也是心照不宣。即便素未谋面也能坐下来就聊得热火朝天。</p>\n<p>&emsp;&emsp;为什么博客在结交志同道合的朋友方面的潜力要远胜于原始的交谈方式？很简单，第一，博客无地域限制，整个互联网上从A到B只有一个点击的距离，而传统的建立朋友圈子的方法则受到地域限制。第二，也是更重要的一点，即如果按照以前结交朋友的方式，需要互相聊天，交流观点，然后才逐渐熟悉起来，这需要一个较长的过程，而且更糟糕的是，当你遇到另一个陌生人，又要把整个过程重复一次，表达你已经对老友表达过的那番想法。可博客却做到了“一次表达，无数次阅读”，当我看到一个写了好几年的博客，看完了之后我仿佛和这个人交谈了很久，用程序员们喜欢听的话来说就是，“博客极大地增强了话语的复用性”。</p>\n<h3 id=\"2-书写是为了更好的思考\"><a href=\"#2-书写是为了更好的思考\" class=\"headerlink\" title=\"2.书写是为了更好的思考\"></a>2.书写是为了更好的思考</h3><p>我在《书写是为了更好的思考》里面详细总结了书写的好处，这里就不拷贝粘贴了。有些想法如果不写下来，也就忘掉了，有一个广为流传的《数学牛人们的轶事》（荣耀属于ukim）里面讲了希尔伯特的一个故事：一次在Hilbert的讨论班上，一个年轻人报告，其中用了一个很漂亮的定理，Hilbert说“这真是一个妙不可言（wunderbaschon）的定理呀,是谁发现的？”那个年轻人茫然的站了很久，对Hilbert说：“是你.……”。</p>\n<h3 id=\"3-“教”是最好的“学”\"><a href=\"#3-“教”是最好的“学”\" class=\"headerlink\" title=\"3.“教”是最好的“学”\"></a>3.“教”是最好的“学”</h3><p>&emsp;&emsp;如果一件事情你不能讲清楚，十有八九你还没有完全理解。绝大多数人应该都知道在程序员行业面试官经常要求你讲解一个东西给他听，他会说他不懂这个东西（他如果真的不懂的话效果其实是最好的），而你的任务则是说到让他理解为止。</p>\n<p>&emsp;&emsp;为了让一个不明白的人做到明白，你必须要知道从明白到不明白他究竟需要掌握哪些概念，这就迫使我们对我们大脑中整个的知识体系来个寻根究底，把藏在水面之下的那些东西统统挖出来，把大脑中的那些我们知道、但不知道自己知道的潜在概念或假设（assumptions）都挖出来，把它们从内隐记忆拉扯到外显记忆中。因为只有完全知道、并知道自己知道一切来龙去脉的人，才能真正把一件事情讲得通通透透。</p>\n<p>&emsp;&emsp;但是，你可能会怀疑，那除了能够讲清楚之外，弄清自己到底知道哪些东西还有其他什么好处吗？如果没有其他好处，那我又何必费这个劲呢？我又不当老师。</p>\n<p>&emsp;&emsp;我们的绝大多数知识在绝大多数时候都隐藏在潜意识中，其实我们意识的窗口很小，我们的工作记忆只能容纳寥寥数个条目（记得那个“看你能够记住屏幕上同时闪现的多少个数字”的flash小游戏吗？），我们平时所作的推理过程很大部分都是自动的，发生在潜意识中，而我们只能感知到一些中间结论。不信你回忆一下你在和别人讨论问题的时候有多少次觉得“反正就是这样，我感觉得到它是对的，但是你问我，我也说不清到底怎么回事”，对此你不觉得很奇怪吗？如果你都不能从逻辑上支持你的结论，你怎么就能确信它是对的呢？仅仅因为你的直觉强烈地告诉你它是对的？那如果旁边有另一个人，他和你持相反的观念，而他的直觉也强烈地告诉他他是对的。这时候你又怎么想？“他的直觉错了，我的直觉是对的”？难道你这么自信你的直觉是世界上最可靠的？</p>\n<p>&emsp;&emsp;我自己则是非常珍惜类似这样的机会，即当“我强烈地觉得它是对的，但我却说不出所以然来”，这时候往往是到大脑中翻箱倒柜的时候，弄清来龙去脉的时候，深入反思的时候，纠正一直以来错误的潜在前提假设的时候。另一方面，“我强烈地觉得这个说法有问题，但我却说不清它为什么有问题，到底哪有问题”，这也是一个极有意义的瞬间，它几乎总是意味着你对一个问题的认识有潜在的偏差，肯定是在你自己都没有觉知到的地方引入了一个潜在的假设、偷换了一个重要的概念，等等。而这种时候就是深入反思的时候，当你终于潜到问题的底层，触摸到问题的实质，把水面之下的冰山整体看清了的时候你会有一种通体舒泰的感觉。</p>\n<p>&emsp;&emsp;为什么说以上这些？因为刚才说的是你必须等待这样的反思机会，但如果你选择经常总结自己的知识体系，并说出来给你的读者听，你就会发现你自己创造了这样的机会。如果我们平时不反思，我们觉得很多事情都是当然的，但结果如果要你一开口说给别人听，常常会发现事情就开始变得不那么明显了，你说着说着，就开始莫名其妙地发现自己需要用到“反正”这个词了。</p>\n<p>&emsp;&emsp;于是，反思的机会就来了。</p>\n<p>&emsp;&emsp;一旦你把自己潜意识里面的东西从幕后拉出来，你就有了面对并反思它们的可能，而不是任它们在幕后阴险地左右你的思维。很多时候我们的思路出了问题并不是我们不会反思，而是不知道自己的思维中有那些隐含的假设（assumptions），如果你只感觉到答案，却不知道你大脑得到这个答案之前做了哪些推理，你又怎么知道哪一环可能出了问题呢？另一方面，一旦你弄清了自己到底是怎么想的，离意识到问题就不远了，很简单的道理——如果别人和你争辩的时候总是只摆立场，你就很难和他辩，但如果他把自己的推理过程原原本本暴露给你，批判起来总是容易得多的。（也正因为这个原因有很多人总是把逻辑藏在背后，不敢暴露出来）</p>\n<p>&emsp;&emsp;绝大多数时候其实我们都会不假思索地得出一些结论，就像上了发条的自动机，但其实我们并不知道这些结论到底怎么来的，在思维的背后到底发生了哪些事情，故而当我们发现我们的结论错了的时候，一头雾水，没法着手寻找到底在哪错了。如果你注意一下很多人的发言（论坛、博客等等），如果你把他们的发言分为“前提”、“假设”、“逻辑”、“结论”这四个部分，你会发现一大堆人只会不停地下结论，摆立场，却见不到这些结论或离场的前提、假设和个中逻辑，倒也不是他们不愿意写出逻辑，而是因为反思自己的思维过程实在是一件困难非常的事情，我们的推理过程很大一部分发生在意识的水面之下，只有当有了重要结论的时候这条逻辑链才会浮出来冒一个泡，让我们的意识捕捉到。更何况绝大多数时候我们用的其实并不是完整严密的逻辑思维，而是思维捷径。</p>\n<blockquote>\n<p>去教一个完全不懂的人，则是一种最最强大和彻底的反思途径——因为他没有任何预备的知识，所以要让他弄懂你所知道的，你就必须彻底反思你的知识体系，弄清这座大厦的根基在什么地方，弄清它的骨架在什么地方，一砖一瓦到底是怎么垒起来的，你不能自己站在11层上，然后假设你的读者站在第10层，指望着只要告诉他第11层有那些内容就让他明白。你的读者站在第一层，你必须知道你脚下踩着的另外10层到底是怎么构造的。这就迫使你对你所掌握的、或之前认为正确的那些东西作彻彻底底的、深刻的反思，你的受众越是不懂，你需要反思得就越深刻。</p>\n</blockquote>\n<h3 id=\"4-讨论是绝佳的反思\"><a href=\"#4-讨论是绝佳的反思\" class=\"headerlink\" title=\"4.讨论是绝佳的反思\"></a>4.讨论是绝佳的反思</h3><p>&emsp;&emsp;另一方面，很多时候我们并不是有机会说给完全不懂的人听，更大的可能性是说给同领域有一定基础的人听，这个时候并不代表就不能促使反思了，实际上，你会发现，如果你公开你的想法，几乎总能看到与你持不同意见的人，然后你通过比较你和他的观念之间的差别，会发现你们在一开始的思路上就存在差异，差异从哪里来的？在进一步讨论中你们就会不断地迫使对方拿出更深层次的理由，这同样也是一种非常有效地促使自己反思的方法，在讨论的过程中双方的理由自然会变得越来越深入，越来越接近问题的本质，一些平时难以注意到的深层面的差异性就会逐渐浮现出来，你也就多了一次难得的机会去审视自己的思维中到底存放了哪些错误的信息。</p>\n<h3 id=\"5-激励你去持续学习和思考\"><a href=\"#5-激励你去持续学习和思考\" class=\"headerlink\" title=\"5.激励你去持续学习和思考\"></a>5.激励你去持续学习和思考</h3><p>&emsp;&emsp;如果你没有持续学习和思考的习惯，你的博客很快就会没有内容可写，就只能整点碎碎念或者转载，然后你就会失去读者，然后你就会关掉博客，然后一旦关掉博客之后你也就死了写博客的心，然后就少了一条激励你去思考和总结的途径，然后你变得更不高兴总结和思考，然后…</p>\n<p>&emsp;&emsp;为了打破这个死循环，不要永久停止更新你的博客，就算你两个月，三个月都不写，只要你每篇都是写自己思考的产物，写有价值的东西，在互联网上，金子的确总是会发光的，因为有无数的信息聚合平台在期待这些有价值的内容，有搜索引擎为你的内容提供海量的潜在读者，有海量的人肉在手动挖掘和转载那些有价值的东西。我们所能做的最差的一个决策莫过于停止做一件没有任何坏处，却有一大堆好处的事情。</p>\n<p>&emsp;&emsp;为了让你的博客有价值，你必须不断总结自己学习的结果，你必须不断思考，给出比别人深刻、独到的见解。这看起来有点本末倒置，但很快本和末就会正过来。</p>\n<h3 id=\"6-学会持之以恒地做一件事情\"><a href=\"#6-学会持之以恒地做一件事情\" class=\"headerlink\" title=\"6.学会持之以恒地做一件事情\"></a>6.学会持之以恒地做一件事情</h3><p>&emsp;&emsp;很多人在生活中容易觉得迷失，不知道想要做什么，是因为没有一件能够持续地做的事情，用俗话来说就是没有主心骨。用积极心理学的话来说就是没有一件能够创造流体验的事情，而书写自己的思想则是一件容易产生流体验的事情，在书写的时候，特别是理性地书写的时候，大脑逐渐进入推理分析模块，一切不愉快的情绪，烦躁感都会逐渐消隐下去。不过前提是你得开始，并且坚持过一开始的困难期，以后的一切便成了习惯成自然。</p>\n<h3 id=\"7-一个长期的价值博客是一份很好的简历\"><a href=\"#7-一个长期的价值博客是一份很好的简历\" class=\"headerlink\" title=\"7.一个长期的价值博客是一份很好的简历\"></a>7.一个长期的价值博客是一份很好的简历</h3><p>&emsp;&emsp;这里的“简历”并非是狭义上的求职简历，毕竟现在还没有到价值博客的时代，很多人写博客都是到处转载或者干脆碎碎念，正因此面试官未必拿个人博客当成了解一个人的更可靠窗口。这里的“简历”是指一个让别人了解自己的窗口，虽然我们未必做得到像罗永浩、Keso这样的博客，个人的影响力已经足以支撑出一份事业（牛博和5gme），但至少你会因此而结识更多的人，你的博客价值越高，你结识的人就越牛，跟牛人交流又会让你的眼界得到极大的开阔，打开一扇又一扇你原本不知道的门，于是你就变得更牛… 这是一个良性循环。</p>\n<h2 id=\"怎么做到长期写一个价值博客\"><a href=\"#怎么做到长期写一个价值博客\" class=\"headerlink\" title=\"怎么做到长期写一个价值博客\"></a>怎么做到长期写一个价值博客</h2><p>&emsp;&emsp;注意到我并没有说“怎么做到长期<strong>坚持</strong>写一个价值博客”，因为当思考和总结成为习惯之后，诉诸文字以及借助书写来进一步思考就变成了一件自然而然的事情，就变成了一件“因为你在思考和总结从而必须书写下来”的事情，博客就变成了副产品。</p>\n<p>&emsp;&emsp;一开始的时候你是因为要写博客而去使劲地思考和总结，指望给出令人眼睛一亮的东西，到了后来，就变成了因为你习惯了思考和总结，因为你意识到书写是更好的思考，你就必须使你的想法成为文字。至此本和末就会各归原位，不再颠倒。</p>\n<p>&emsp;&emsp;怎样做到长期写一个价值博客？也许有人会给出很多有趣有用的小技巧来提供动机和激励，譬如如何做SEO，如何鼓励读者留言等等，但是这些我都不想说，我只想说最最重要的，那就是：</p>\n<blockquote>\n<p>让你自己成为一个持续学习和思考的人，并只写你真正思考和总结之后的产物，其他一切就会随之而来。</p>\n</blockquote>\n<p>&emsp;&emsp;就像那句经常被人传阅的话：只做你最感兴趣的事情，钱会随之而来[2]。</p>\n<p>&emsp;&emsp;这方面的具体例子大家可以留意一下，随处可见，就不一一举了。我想再重复一下的是，千万不要碎碎念，我能理解每个人都想偶尔发发牢骚的冲动，但是现在已经有了一个很好的窗口：twitter，所以立即停止在你的博客上碎碎念，阅读博客的人希望得到信息而非噪音。如果实在忍不住想碎碎念的话不妨换一下位置，这么来告诉自己：如果你看到别人博客来上这么一段，你会有兴趣看吗？</p>\n<h2 id=\"可能出现的问题以及怎样应付\"><a href=\"#可能出现的问题以及怎样应付\" class=\"headerlink\" title=\"可能出现的问题以及怎样应付\"></a>可能出现的问题以及怎样应付</h2><p>&emsp;&emsp;即便上文给出了N条写博客的理由，但有时候只要一条不写的理由就会让人停止做一件事情。所以我特别加上一节“可能出现的问题以及怎样应付”，《影响力2》[3]第五章雄辩地证明，“Much of Will is Skill”，意志力很大程度上来源于有正确的方法，而非天生。</p>\n<h3 id=\"1-担心别人认为没有价值\"><a href=\"#1-担心别人认为没有价值\" class=\"headerlink\" title=\"1.担心别人认为没有价值\"></a>1.担心别人认为没有价值</h3><p>&emsp;&emsp;事实是，你面临过的问题总会有人面临过，你独立思考了，别人没有，你的文章对他们就会有价值。当然，肯定会对某些人没有价值，他们早就知道了，但就算你再厉害，也总是有人比你厉害的，不能说因为这些原因就不记录你自己的想法了，你自己思考了之后理解得最深刻，就算有别人想过了，总有人没有想到的。况且，思考成了习惯，你的思考能力也会越来越强，你的文章也会越来越有价值。重复，无论你面临什么困惑，总会有很多人同样面临过，于是你苦苦思索之后的结果，肯定会对很多人有意义。</p>\n<p>&emsp;&emsp;或者，你想通了之后觉得其实也很简单于是不愿意或者不好意思写了，但要知道，问题在想通了之后总是简单的，问题的困难程度不在于想通了之后还觉得有多难，而在于从你觉得它难到你觉得它简单需要耗费多少思维体力，你耗费的时间越长，说明有越多的人最终还是没有想明白（路越长走到底的人越少）。</p>\n<p>&emsp;&emsp;最后，虽然我现在看一年前的文章觉得挺不成熟，但是如果没有那些不成熟的思考，也不会有现在更成熟的思考，我几年后来看现在写的东西，还是会觉得不成熟。</p>\n<h3 id=\"2-担心想法太幼稚或有漏洞等等被别人笑话\"><a href=\"#2-担心想法太幼稚或有漏洞等等被别人笑话\" class=\"headerlink\" title=\"2.担心想法太幼稚或有漏洞等等被别人笑话\"></a>2.担心想法太幼稚或有漏洞等等被别人笑话</h3><p>&emsp;&emsp;人非圣贤。正是因为单个人的想法总是有漏洞，才值得拿出来交流（《书写是更好的思考》，讨论是绝佳的反思），被别人指出问题正是改进的空间，藏着掖着的想法永远不可能变得更成熟。</p>\n<p>&emsp;&emsp;Much of intelligence is knowledge，有这么一个非常发人深省的经典心理学实验[4]：</p>\n<p>&emsp;&emsp;将孩子们分成两组，通过给他们不同的阅读材料让一组相信智力是天生的，不可在后天改变的，另一组则让他们相信智力其实只是知识和技能的代名词，完全是后天习得的。接下来让他们做一组任务，那些被相信智力天生说的孩子，倾向于回避困难的任务，选择较容易的任务，这里的逻辑想必是这样的：如果做困难的任务，就增大了失败的几率，就在降低了自己在别人和自己心目中的智力的值。为了保护这个智力的值不被降低，应该避免那些有失败风险的项目。而另一组孩子则对于有挑战性的事情跃跃欲试，并且在失败的时候明显没有前者沮丧，因为失败也是学得新的东西，不管怎样都是“智力”的提高。</p>\n<p>&emsp;&emsp;况且，只会批判乃至嘲笑别人的人是最不知道怎么建设的人，忽略他们。</p>\n<h3 id=\"3-得不到激励\"><a href=\"#3-得不到激励\" class=\"headerlink\" title=\"3.得不到激励\"></a>3.得不到激励</h3><p>&emsp;&emsp;这其实是个最无聊的问题了，只有写碎碎念的博客才会面对“激励”的问题。如果写自己的总结，写自己独立的思考，那么书写下来、理解通透，本身就是一个极大的激励。就算放在自己的私密笔记本里面也一样有成就感。况且，如果你真做到了书写价值博客，那么绝对不用担心你的观点得不到传播，也许一开始会耗时长一点，但是这在任何事情上都是必要的初始阶段，Gmail小组的核心人物、FriendFeed创始人Paul Buchheit，和编程界名博Coding Horror的博主Jeff Atwood都曾经感叹过：Overnight success takes a long time （(1)，(2)），不过对于价值博客来说，现在网络上的聚合类服务这么多，机器的、人肉的、半人肉的都有，情况又要好得多了，而且我相信情况还会越来越好。</p>\n<h3 id=\"4-写不出来\"><a href=\"#4-写不出来\" class=\"headerlink\" title=\"4.写不出来\"></a>4.写不出来</h3><p>&emsp;&emsp;这个问题也比较无聊，思考本不是一件急于求成的事情。长期订阅我的博客的朋友知道我一般发文频率在一个月三五篇，实际上有不少次我个把月也不发布文章，原因很简单，要么是有手头的事情要处理思考的时间被压缩了，要么是遇到比较大或者比较困难的问题需要长时间的思考和积淀，没有关系，如果没有想清楚就再想想，爱思考的人和不爱思考的人有一个本质的区别，前者在生活中总是挂着几个问题在大脑中，它们时常都会冒出来骚扰你一下，让你琢磨琢磨，不爱思考的则是没事不主动想问题，遇到问题还要先想想是否能找捷径（找人帮忙）解决。</p>\n<p>&emsp;&emsp;无论如何，不用急于求成，在一个主题上深入下去思考，总能挖到别人挖不到的角落。你能让一个问题在大脑中停留的时间越长，就越是能够发现新的东西，一般来说，我认为有价值的问题我会让他在意识或潜意识中待短则一个星期，长则一个月（视问题大小而定），利用走路吃饭的时间琢磨（我发现很多我佩服的人也都有这个习惯），有时即便已经想通了写下来了发出去了，大脑仍然还是会在回味问题，还没有把它撤出潜意识，然后看到某篇文章或某本书的时候忽然又有所新的感悟。</p>\n<p>&emsp;&emsp;能够把问题长时间停靠在潜意识中是一种技能，能够带来很大的好处，停留得越长你越琢磨得透彻，比别人看到的就越多。我们必须要带着问题的眼镜看待事物才能发现新的视角，否则就会出现视而不见效应，别的不说，广为人知的例子是阿基米德的“尤里卡！”，如果不是长时间琢磨着一个问题，一直把它放在思维中，是不会从洗澡领悟到“排水测体积”的，否则他洗了那么多年澡怎么不早发现呢？[5]</p>\n<p>&emsp;&emsp;所以，如果你习惯了思考问题，就总会有东西写，先有思考，然后有总结，然后在总结中进一步思考。</p>\n<p>&emsp;&emsp;当然你也可以试试把不成熟的想法写下来，试图整理成条理清晰的文字，然后看看能否在整理的过程中走得更远。这往往是可行的。比如这篇文章在我的简记里面原本其实只有三行字（包含大约十来个备忘关键词），而最初在我的大脑里面其实只有一个走路时冒出来的问题——为什么要写博客？</p>"},{"title":"[VUE]关于组建间传值的问题","date":"2018-10-01T12:06:14.000Z","_content":"# VUE组件间传值\n组件间的传值，是前端开发中常用到的一个场景。比如说我们做一个博客浏览功能，点击不同的博客标题，要先打开一个博客的简介。\n浏览简介信息之后，对内容感兴趣会查看博客全文。这里面就用到了两个通信：\n1.点击博客标题后，告诉简介组件，显示哪一篇博客的简介。\n2.点击查看全文后，告诉全文组件，显示哪一篇博客的全文。\n# 你的需求是什么？\n组件间传值，可以分为两种，实时的和非实时的。\n实时的就是通讯。一般通过VUE的双向数据绑定和自定义事件emit来实现。\n非实时的是共享数据。可以通过store模式，VueX或者H5的localStorage来实现。\n<!--more-->\n# 通讯\n这一部分官网的例子比较好，这里只做简单的说明，备忘录。\n## 1.父子组件传值\n父子组件间的传值，是最常用的场景。[官网教程](https://cn.vuejs.org/v2/guide/components-props.html)\n下面的例子，假设my-blog为父组件，blog-post为子组件。\n### 父传子\n在父组件中，使用v-bind指令，来传值。\n```\n//在父组件中，通过v-bind指令，传入一个常量：likes。值为42\n<blog-post v-bind:likes=\"42\"></blog-post>\n//传入一个变量：post.likes\n<blog-post v-bind:likes=\"post.likes\"></blog-post>\n//所有的 prop 都使得其父子 prop 之间形成了一个单向下行绑定\n```\n### 子传父\n在子组件中，使用自定义事件emit来传值。[官网教程](https://cn.vuejs.org/v2/guide/components-custom-events.html)\n自定义事件跟组件和 prop 不同，事件名不存在任何自动化的大小写转换。而是触发的事件名需要完全匹配监听这个事件所用的名称。\n举个例子，如果触发一个 camelCase 名字的事件：\n```\n//子组件中，调用自定义事件\nthis.$emit('myEvent')\n//可以带上参数\nthis.$emit('myEvent','param')\n//父组件能收到这个事件的前提是监听这个事件，需要通过v-on：\n<blog-post v-on:my-event=\"doSomething\"></blog-post>\n```\n<font face=\"微软雅黑\" color=red size=14>重点说明：</font>\n事件名不会被用作一个 JavaScript 变量名或属性名，所以就没有理由使用 camelCase 或 PascalCase 了。\n并且 v-on 事件监听器在 DOM 模板中会被自动转换为全小写 (因为 HTML 是大小写不敏感的)，\n所以 v-on:myEvent 将会变成 v-on:myevent——导致 myEvent 不可能被监听到。\n因此，我们推荐你始终使用 kebab-case 的事件名。\n## 2.非父非子\n通过Bus模式传值，或者绑定使用[VueX](https://vuex.vuejs.org/)。\nBus模式有一个局限性，就是监听的实时性。监听只能在组件建立之后，如果需要在组件创建前就获取到数据，那可就难办了。\n就像我说，你听。你开始听之后，我说的你都听到了。如果你没开始听，我就说了，那你肯定听不到了。\n如果需要在你开始听之前就想听到我说的，那其实不是实时的了，是一个共享数据的场景，下面说共享的时候会讲到。\n### Bus模式\n本质是通过一个名为Bus的Vue组件，来完成通信。详见[Bus总线](https://www.cnblogs.com/fanlinqiang/p/7756566.html)，这里做个备忘\n通过Bus.js制造一个Bus\n```\nBus.js\n\nimport Vue from 'vue'\nconst Bus = new Vue()\nexport default Bus\n```\n组件1\n```\nimport Bus from './Bus'\n\nexport default {\n    data() {\n        return {\n            .........\n            }\n      },\n  methods: {\n        ....\n        Bus.$emit('log', 120)\n    },\n\n  }\n```\n组件2\n```\nimport Bus from './Bus'\n\nexport default {\n    data() {\n        return {\n            .........\n            }\n      },\n    mounted () {\n       Bus.$on('log', content => {\n          console.log(content)\n          this.content = content\n        });\n    }\n}\n```\nTips:\n通过箭头函数=>，可以用this方便的绑定vue组件。\n还有个方法能传值，通过路由。可是仅限于使用路由的情况，详见官网[动态路由]()\n# 共享数据\n共享什么类型的数据，是否需要永久存储，还是实时操作的数据，关掉浏览器就消失。\n典型场景是使用Bus模式时，监听只能在组件创建之后才能实现，如果组件没有创建就需要监听，Bus模式就无能为力了。\n## 临时数据\n虽然需要存储，但是又不立刻使用，关闭了浏览器就没用的数据。可以通过store模式，或者VueX，HTML5的sessionLocalStorage实现。\n### 1.store模式\nstore模式正是VueX的原理所在，官网的说法是一般复杂度的网站，最好不要使用VueX，store就行了。VueX就像眼镜：您自会知道什么时候需要它。\n[官网说明](https://vuex.vuejs.org/zh/)\n```\nstore模式的实现\n创建store.js\nlet store = {\n    debug: true,\n    state: {\n        message: 'Hello!'\n    },\n    setMessageAction(newValue) {\n        if (this.debug) console.log('setMessageAction triggered with:', newValue)\n        this.state.message = newValue\n    },\n    clearMessageAction() {\n        if (this.debug) console.log('clearMessageAction triggered')\n        this.state.message = ''\n    }\n}\n\nexport {store as Storage}\n\nPS:为了避免与VueX的store混淆，我起了storage.js的名字，并且在使用中，用storage来代替store。\n\n使用：\n<script>\n    import {Storage} from '../js/storage'\n\n    export default {\n        name: \"Demo\",\n        data() {\n            return {\n                sharedState: Storage.state\n            }\n        },\n        created() {\n            Storage.setMessageAction(\"this is store mode\")      //设置message的值\n        },\n        mounted() {\n            console.log(this.sharedState.message)               //获取message的值\n        }\n    }\n</script>\n```\n### 2.sessionLocalStorage\n此篇博客主要讲VUE的知识，这里只提供思路，关于sessionLocalStorage的知识，请[百度](http://www.baidu.com)\n## 永久数据\n比如说用户选择的主题，喜好设置等。少量的数据，可以放在HTML5的localStorage中。如果数据量比较大，可以放在indexDB中。\n这个很好玩，期望规范早日落实，下次拿出indexDB，单开一篇博客，这里不多讲了。","source":"_posts/2018-10-01-VUE-关于组建间传值的问题.md","raw":"---\ntitle: '[VUE]关于组建间传值的问题'\ndate: 2018-10-01 20:06:14\ncategories:\n- VUE\ntags:\n- VUE\n- 传值\n- 通信\n- 共享数据\n---\n# VUE组件间传值\n组件间的传值，是前端开发中常用到的一个场景。比如说我们做一个博客浏览功能，点击不同的博客标题，要先打开一个博客的简介。\n浏览简介信息之后，对内容感兴趣会查看博客全文。这里面就用到了两个通信：\n1.点击博客标题后，告诉简介组件，显示哪一篇博客的简介。\n2.点击查看全文后，告诉全文组件，显示哪一篇博客的全文。\n# 你的需求是什么？\n组件间传值，可以分为两种，实时的和非实时的。\n实时的就是通讯。一般通过VUE的双向数据绑定和自定义事件emit来实现。\n非实时的是共享数据。可以通过store模式，VueX或者H5的localStorage来实现。\n<!--more-->\n# 通讯\n这一部分官网的例子比较好，这里只做简单的说明，备忘录。\n## 1.父子组件传值\n父子组件间的传值，是最常用的场景。[官网教程](https://cn.vuejs.org/v2/guide/components-props.html)\n下面的例子，假设my-blog为父组件，blog-post为子组件。\n### 父传子\n在父组件中，使用v-bind指令，来传值。\n```\n//在父组件中，通过v-bind指令，传入一个常量：likes。值为42\n<blog-post v-bind:likes=\"42\"></blog-post>\n//传入一个变量：post.likes\n<blog-post v-bind:likes=\"post.likes\"></blog-post>\n//所有的 prop 都使得其父子 prop 之间形成了一个单向下行绑定\n```\n### 子传父\n在子组件中，使用自定义事件emit来传值。[官网教程](https://cn.vuejs.org/v2/guide/components-custom-events.html)\n自定义事件跟组件和 prop 不同，事件名不存在任何自动化的大小写转换。而是触发的事件名需要完全匹配监听这个事件所用的名称。\n举个例子，如果触发一个 camelCase 名字的事件：\n```\n//子组件中，调用自定义事件\nthis.$emit('myEvent')\n//可以带上参数\nthis.$emit('myEvent','param')\n//父组件能收到这个事件的前提是监听这个事件，需要通过v-on：\n<blog-post v-on:my-event=\"doSomething\"></blog-post>\n```\n<font face=\"微软雅黑\" color=red size=14>重点说明：</font>\n事件名不会被用作一个 JavaScript 变量名或属性名，所以就没有理由使用 camelCase 或 PascalCase 了。\n并且 v-on 事件监听器在 DOM 模板中会被自动转换为全小写 (因为 HTML 是大小写不敏感的)，\n所以 v-on:myEvent 将会变成 v-on:myevent——导致 myEvent 不可能被监听到。\n因此，我们推荐你始终使用 kebab-case 的事件名。\n## 2.非父非子\n通过Bus模式传值，或者绑定使用[VueX](https://vuex.vuejs.org/)。\nBus模式有一个局限性，就是监听的实时性。监听只能在组件建立之后，如果需要在组件创建前就获取到数据，那可就难办了。\n就像我说，你听。你开始听之后，我说的你都听到了。如果你没开始听，我就说了，那你肯定听不到了。\n如果需要在你开始听之前就想听到我说的，那其实不是实时的了，是一个共享数据的场景，下面说共享的时候会讲到。\n### Bus模式\n本质是通过一个名为Bus的Vue组件，来完成通信。详见[Bus总线](https://www.cnblogs.com/fanlinqiang/p/7756566.html)，这里做个备忘\n通过Bus.js制造一个Bus\n```\nBus.js\n\nimport Vue from 'vue'\nconst Bus = new Vue()\nexport default Bus\n```\n组件1\n```\nimport Bus from './Bus'\n\nexport default {\n    data() {\n        return {\n            .........\n            }\n      },\n  methods: {\n        ....\n        Bus.$emit('log', 120)\n    },\n\n  }\n```\n组件2\n```\nimport Bus from './Bus'\n\nexport default {\n    data() {\n        return {\n            .........\n            }\n      },\n    mounted () {\n       Bus.$on('log', content => {\n          console.log(content)\n          this.content = content\n        });\n    }\n}\n```\nTips:\n通过箭头函数=>，可以用this方便的绑定vue组件。\n还有个方法能传值，通过路由。可是仅限于使用路由的情况，详见官网[动态路由]()\n# 共享数据\n共享什么类型的数据，是否需要永久存储，还是实时操作的数据，关掉浏览器就消失。\n典型场景是使用Bus模式时，监听只能在组件创建之后才能实现，如果组件没有创建就需要监听，Bus模式就无能为力了。\n## 临时数据\n虽然需要存储，但是又不立刻使用，关闭了浏览器就没用的数据。可以通过store模式，或者VueX，HTML5的sessionLocalStorage实现。\n### 1.store模式\nstore模式正是VueX的原理所在，官网的说法是一般复杂度的网站，最好不要使用VueX，store就行了。VueX就像眼镜：您自会知道什么时候需要它。\n[官网说明](https://vuex.vuejs.org/zh/)\n```\nstore模式的实现\n创建store.js\nlet store = {\n    debug: true,\n    state: {\n        message: 'Hello!'\n    },\n    setMessageAction(newValue) {\n        if (this.debug) console.log('setMessageAction triggered with:', newValue)\n        this.state.message = newValue\n    },\n    clearMessageAction() {\n        if (this.debug) console.log('clearMessageAction triggered')\n        this.state.message = ''\n    }\n}\n\nexport {store as Storage}\n\nPS:为了避免与VueX的store混淆，我起了storage.js的名字，并且在使用中，用storage来代替store。\n\n使用：\n<script>\n    import {Storage} from '../js/storage'\n\n    export default {\n        name: \"Demo\",\n        data() {\n            return {\n                sharedState: Storage.state\n            }\n        },\n        created() {\n            Storage.setMessageAction(\"this is store mode\")      //设置message的值\n        },\n        mounted() {\n            console.log(this.sharedState.message)               //获取message的值\n        }\n    }\n</script>\n```\n### 2.sessionLocalStorage\n此篇博客主要讲VUE的知识，这里只提供思路，关于sessionLocalStorage的知识，请[百度](http://www.baidu.com)\n## 永久数据\n比如说用户选择的主题，喜好设置等。少量的数据，可以放在HTML5的localStorage中。如果数据量比较大，可以放在indexDB中。\n这个很好玩，期望规范早日落实，下次拿出indexDB，单开一篇博客，这里不多讲了。","slug":"VUE-关于组建间传值的问题","published":1,"updated":"2018-10-01T13:32:07.016Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmqc6729000n1ouowafrx2pf","content":"<h1 id=\"VUE组件间传值\"><a href=\"#VUE组件间传值\" class=\"headerlink\" title=\"VUE组件间传值\"></a>VUE组件间传值</h1><p>组件间的传值，是前端开发中常用到的一个场景。比如说我们做一个博客浏览功能，点击不同的博客标题，要先打开一个博客的简介。<br>浏览简介信息之后，对内容感兴趣会查看博客全文。这里面就用到了两个通信：<br>1.点击博客标题后，告诉简介组件，显示哪一篇博客的简介。<br>2.点击查看全文后，告诉全文组件，显示哪一篇博客的全文。</p>\n<h1 id=\"你的需求是什么？\"><a href=\"#你的需求是什么？\" class=\"headerlink\" title=\"你的需求是什么？\"></a>你的需求是什么？</h1><p>组件间传值，可以分为两种，实时的和非实时的。<br>实时的就是通讯。一般通过VUE的双向数据绑定和自定义事件emit来实现。<br>非实时的是共享数据。可以通过store模式，VueX或者H5的localStorage来实现。<br><a id=\"more\"></a></p>\n<h1 id=\"通讯\"><a href=\"#通讯\" class=\"headerlink\" title=\"通讯\"></a>通讯</h1><p>这一部分官网的例子比较好，这里只做简单的说明，备忘录。</p>\n<h2 id=\"1-父子组件传值\"><a href=\"#1-父子组件传值\" class=\"headerlink\" title=\"1.父子组件传值\"></a>1.父子组件传值</h2><p>父子组件间的传值，是最常用的场景。<a href=\"https://cn.vuejs.org/v2/guide/components-props.html\" target=\"_blank\" rel=\"noopener\">官网教程</a><br>下面的例子，假设my-blog为父组件，blog-post为子组件。</p>\n<h3 id=\"父传子\"><a href=\"#父传子\" class=\"headerlink\" title=\"父传子\"></a>父传子</h3><p>在父组件中，使用v-bind指令，来传值。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//在父组件中，通过v-bind指令，传入一个常量：likes。值为42</span><br><span class=\"line\">&lt;blog-post v-bind:likes=&quot;42&quot;&gt;&lt;/blog-post&gt;</span><br><span class=\"line\">//传入一个变量：post.likes</span><br><span class=\"line\">&lt;blog-post v-bind:likes=&quot;post.likes&quot;&gt;&lt;/blog-post&gt;</span><br><span class=\"line\">//所有的 prop 都使得其父子 prop 之间形成了一个单向下行绑定</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"子传父\"><a href=\"#子传父\" class=\"headerlink\" title=\"子传父\"></a>子传父</h3><p>在子组件中，使用自定义事件emit来传值。<a href=\"https://cn.vuejs.org/v2/guide/components-custom-events.html\" target=\"_blank\" rel=\"noopener\">官网教程</a><br>自定义事件跟组件和 prop 不同，事件名不存在任何自动化的大小写转换。而是触发的事件名需要完全匹配监听这个事件所用的名称。<br>举个例子，如果触发一个 camelCase 名字的事件：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//子组件中，调用自定义事件</span><br><span class=\"line\">this.$emit(&apos;myEvent&apos;)</span><br><span class=\"line\">//可以带上参数</span><br><span class=\"line\">this.$emit(&apos;myEvent&apos;,&apos;param&apos;)</span><br><span class=\"line\">//父组件能收到这个事件的前提是监听这个事件，需要通过v-on：</span><br><span class=\"line\">&lt;blog-post v-on:my-event=&quot;doSomething&quot;&gt;&lt;/blog-post&gt;</span><br></pre></td></tr></table></figure></p>\n<p><font face=\"微软雅黑\" color=\"red\" size=\"14\">重点说明：</font><br>事件名不会被用作一个 JavaScript 变量名或属性名，所以就没有理由使用 camelCase 或 PascalCase 了。<br>并且 v-on 事件监听器在 DOM 模板中会被自动转换为全小写 (因为 HTML 是大小写不敏感的)，<br>所以 v-on:myEvent 将会变成 v-on:myevent——导致 myEvent 不可能被监听到。<br>因此，我们推荐你始终使用 kebab-case 的事件名。</p>\n<h2 id=\"2-非父非子\"><a href=\"#2-非父非子\" class=\"headerlink\" title=\"2.非父非子\"></a>2.非父非子</h2><p>通过Bus模式传值，或者绑定使用<a href=\"https://vuex.vuejs.org/\" target=\"_blank\" rel=\"noopener\">VueX</a>。<br>Bus模式有一个局限性，就是监听的实时性。监听只能在组件建立之后，如果需要在组件创建前就获取到数据，那可就难办了。<br>就像我说，你听。你开始听之后，我说的你都听到了。如果你没开始听，我就说了，那你肯定听不到了。<br>如果需要在你开始听之前就想听到我说的，那其实不是实时的了，是一个共享数据的场景，下面说共享的时候会讲到。</p>\n<h3 id=\"Bus模式\"><a href=\"#Bus模式\" class=\"headerlink\" title=\"Bus模式\"></a>Bus模式</h3><p>本质是通过一个名为Bus的Vue组件，来完成通信。详见<a href=\"https://www.cnblogs.com/fanlinqiang/p/7756566.html\" target=\"_blank\" rel=\"noopener\">Bus总线</a>，这里做个备忘<br>通过Bus.js制造一个Bus<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Bus.js</span><br><span class=\"line\"></span><br><span class=\"line\">import Vue from &apos;vue&apos;</span><br><span class=\"line\">const Bus = new Vue()</span><br><span class=\"line\">export default Bus</span><br></pre></td></tr></table></figure></p>\n<p>组件1<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import Bus from &apos;./Bus&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">    data() &#123;</span><br><span class=\"line\">        return &#123;</span><br><span class=\"line\">            .........</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">        ....</span><br><span class=\"line\">        Bus.$emit(&apos;log&apos;, 120)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure></p>\n<p>组件2<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import Bus from &apos;./Bus&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">    data() &#123;</span><br><span class=\"line\">        return &#123;</span><br><span class=\"line\">            .........</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    mounted () &#123;</span><br><span class=\"line\">       Bus.$on(&apos;log&apos;, content =&gt; &#123;</span><br><span class=\"line\">          console.log(content)</span><br><span class=\"line\">          this.content = content</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Tips:<br>通过箭头函数=&gt;，可以用this方便的绑定vue组件。<br>还有个方法能传值，通过路由。可是仅限于使用路由的情况，详见官网<a href=\"\">动态路由</a></p>\n<h1 id=\"共享数据\"><a href=\"#共享数据\" class=\"headerlink\" title=\"共享数据\"></a>共享数据</h1><p>共享什么类型的数据，是否需要永久存储，还是实时操作的数据，关掉浏览器就消失。<br>典型场景是使用Bus模式时，监听只能在组件创建之后才能实现，如果组件没有创建就需要监听，Bus模式就无能为力了。</p>\n<h2 id=\"临时数据\"><a href=\"#临时数据\" class=\"headerlink\" title=\"临时数据\"></a>临时数据</h2><p>虽然需要存储，但是又不立刻使用，关闭了浏览器就没用的数据。可以通过store模式，或者VueX，HTML5的sessionLocalStorage实现。</p>\n<h3 id=\"1-store模式\"><a href=\"#1-store模式\" class=\"headerlink\" title=\"1.store模式\"></a>1.store模式</h3><p>store模式正是VueX的原理所在，官网的说法是一般复杂度的网站，最好不要使用VueX，store就行了。VueX就像眼镜：您自会知道什么时候需要它。<br><a href=\"https://vuex.vuejs.org/zh/\" target=\"_blank\" rel=\"noopener\">官网说明</a><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">store模式的实现</span><br><span class=\"line\">创建store.js</span><br><span class=\"line\">let store = &#123;</span><br><span class=\"line\">    debug: true,</span><br><span class=\"line\">    state: &#123;</span><br><span class=\"line\">        message: &apos;Hello!&apos;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    setMessageAction(newValue) &#123;</span><br><span class=\"line\">        if (this.debug) console.log(&apos;setMessageAction triggered with:&apos;, newValue)</span><br><span class=\"line\">        this.state.message = newValue</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    clearMessageAction() &#123;</span><br><span class=\"line\">        if (this.debug) console.log(&apos;clearMessageAction triggered&apos;)</span><br><span class=\"line\">        this.state.message = &apos;&apos;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export &#123;store as Storage&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">PS:为了避免与VueX的store混淆，我起了storage.js的名字，并且在使用中，用storage来代替store。</span><br><span class=\"line\"></span><br><span class=\"line\">使用：</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    import &#123;Storage&#125; from &apos;../js/storage&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">    export default &#123;</span><br><span class=\"line\">        name: &quot;Demo&quot;,</span><br><span class=\"line\">        data() &#123;</span><br><span class=\"line\">            return &#123;</span><br><span class=\"line\">                sharedState: Storage.state</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        created() &#123;</span><br><span class=\"line\">            Storage.setMessageAction(&quot;this is store mode&quot;)      //设置message的值</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        mounted() &#123;</span><br><span class=\"line\">            console.log(this.sharedState.message)               //获取message的值</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-sessionLocalStorage\"><a href=\"#2-sessionLocalStorage\" class=\"headerlink\" title=\"2.sessionLocalStorage\"></a>2.sessionLocalStorage</h3><p>此篇博客主要讲VUE的知识，这里只提供思路，关于sessionLocalStorage的知识，请<a href=\"http://www.baidu.com\" target=\"_blank\" rel=\"noopener\">百度</a></p>\n<h2 id=\"永久数据\"><a href=\"#永久数据\" class=\"headerlink\" title=\"永久数据\"></a>永久数据</h2><p>比如说用户选择的主题，喜好设置等。少量的数据，可以放在HTML5的localStorage中。如果数据量比较大，可以放在indexDB中。<br>这个很好玩，期望规范早日落实，下次拿出indexDB，单开一篇博客，这里不多讲了。</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"VUE组件间传值\"><a href=\"#VUE组件间传值\" class=\"headerlink\" title=\"VUE组件间传值\"></a>VUE组件间传值</h1><p>组件间的传值，是前端开发中常用到的一个场景。比如说我们做一个博客浏览功能，点击不同的博客标题，要先打开一个博客的简介。<br>浏览简介信息之后，对内容感兴趣会查看博客全文。这里面就用到了两个通信：<br>1.点击博客标题后，告诉简介组件，显示哪一篇博客的简介。<br>2.点击查看全文后，告诉全文组件，显示哪一篇博客的全文。</p>\n<h1 id=\"你的需求是什么？\"><a href=\"#你的需求是什么？\" class=\"headerlink\" title=\"你的需求是什么？\"></a>你的需求是什么？</h1><p>组件间传值，可以分为两种，实时的和非实时的。<br>实时的就是通讯。一般通过VUE的双向数据绑定和自定义事件emit来实现。<br>非实时的是共享数据。可以通过store模式，VueX或者H5的localStorage来实现。<br>","more":"</p>\n<h1 id=\"通讯\"><a href=\"#通讯\" class=\"headerlink\" title=\"通讯\"></a>通讯</h1><p>这一部分官网的例子比较好，这里只做简单的说明，备忘录。</p>\n<h2 id=\"1-父子组件传值\"><a href=\"#1-父子组件传值\" class=\"headerlink\" title=\"1.父子组件传值\"></a>1.父子组件传值</h2><p>父子组件间的传值，是最常用的场景。<a href=\"https://cn.vuejs.org/v2/guide/components-props.html\" target=\"_blank\" rel=\"noopener\">官网教程</a><br>下面的例子，假设my-blog为父组件，blog-post为子组件。</p>\n<h3 id=\"父传子\"><a href=\"#父传子\" class=\"headerlink\" title=\"父传子\"></a>父传子</h3><p>在父组件中，使用v-bind指令，来传值。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//在父组件中，通过v-bind指令，传入一个常量：likes。值为42</span><br><span class=\"line\">&lt;blog-post v-bind:likes=&quot;42&quot;&gt;&lt;/blog-post&gt;</span><br><span class=\"line\">//传入一个变量：post.likes</span><br><span class=\"line\">&lt;blog-post v-bind:likes=&quot;post.likes&quot;&gt;&lt;/blog-post&gt;</span><br><span class=\"line\">//所有的 prop 都使得其父子 prop 之间形成了一个单向下行绑定</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"子传父\"><a href=\"#子传父\" class=\"headerlink\" title=\"子传父\"></a>子传父</h3><p>在子组件中，使用自定义事件emit来传值。<a href=\"https://cn.vuejs.org/v2/guide/components-custom-events.html\" target=\"_blank\" rel=\"noopener\">官网教程</a><br>自定义事件跟组件和 prop 不同，事件名不存在任何自动化的大小写转换。而是触发的事件名需要完全匹配监听这个事件所用的名称。<br>举个例子，如果触发一个 camelCase 名字的事件：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//子组件中，调用自定义事件</span><br><span class=\"line\">this.$emit(&apos;myEvent&apos;)</span><br><span class=\"line\">//可以带上参数</span><br><span class=\"line\">this.$emit(&apos;myEvent&apos;,&apos;param&apos;)</span><br><span class=\"line\">//父组件能收到这个事件的前提是监听这个事件，需要通过v-on：</span><br><span class=\"line\">&lt;blog-post v-on:my-event=&quot;doSomething&quot;&gt;&lt;/blog-post&gt;</span><br></pre></td></tr></table></figure></p>\n<p><font face=\"微软雅黑\" color=\"red\" size=\"14\">重点说明：</font><br>事件名不会被用作一个 JavaScript 变量名或属性名，所以就没有理由使用 camelCase 或 PascalCase 了。<br>并且 v-on 事件监听器在 DOM 模板中会被自动转换为全小写 (因为 HTML 是大小写不敏感的)，<br>所以 v-on:myEvent 将会变成 v-on:myevent——导致 myEvent 不可能被监听到。<br>因此，我们推荐你始终使用 kebab-case 的事件名。</p>\n<h2 id=\"2-非父非子\"><a href=\"#2-非父非子\" class=\"headerlink\" title=\"2.非父非子\"></a>2.非父非子</h2><p>通过Bus模式传值，或者绑定使用<a href=\"https://vuex.vuejs.org/\" target=\"_blank\" rel=\"noopener\">VueX</a>。<br>Bus模式有一个局限性，就是监听的实时性。监听只能在组件建立之后，如果需要在组件创建前就获取到数据，那可就难办了。<br>就像我说，你听。你开始听之后，我说的你都听到了。如果你没开始听，我就说了，那你肯定听不到了。<br>如果需要在你开始听之前就想听到我说的，那其实不是实时的了，是一个共享数据的场景，下面说共享的时候会讲到。</p>\n<h3 id=\"Bus模式\"><a href=\"#Bus模式\" class=\"headerlink\" title=\"Bus模式\"></a>Bus模式</h3><p>本质是通过一个名为Bus的Vue组件，来完成通信。详见<a href=\"https://www.cnblogs.com/fanlinqiang/p/7756566.html\" target=\"_blank\" rel=\"noopener\">Bus总线</a>，这里做个备忘<br>通过Bus.js制造一个Bus<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Bus.js</span><br><span class=\"line\"></span><br><span class=\"line\">import Vue from &apos;vue&apos;</span><br><span class=\"line\">const Bus = new Vue()</span><br><span class=\"line\">export default Bus</span><br></pre></td></tr></table></figure></p>\n<p>组件1<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import Bus from &apos;./Bus&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">    data() &#123;</span><br><span class=\"line\">        return &#123;</span><br><span class=\"line\">            .........</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">        ....</span><br><span class=\"line\">        Bus.$emit(&apos;log&apos;, 120)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure></p>\n<p>组件2<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import Bus from &apos;./Bus&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">    data() &#123;</span><br><span class=\"line\">        return &#123;</span><br><span class=\"line\">            .........</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    mounted () &#123;</span><br><span class=\"line\">       Bus.$on(&apos;log&apos;, content =&gt; &#123;</span><br><span class=\"line\">          console.log(content)</span><br><span class=\"line\">          this.content = content</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Tips:<br>通过箭头函数=&gt;，可以用this方便的绑定vue组件。<br>还有个方法能传值，通过路由。可是仅限于使用路由的情况，详见官网<a href=\"\">动态路由</a></p>\n<h1 id=\"共享数据\"><a href=\"#共享数据\" class=\"headerlink\" title=\"共享数据\"></a>共享数据</h1><p>共享什么类型的数据，是否需要永久存储，还是实时操作的数据，关掉浏览器就消失。<br>典型场景是使用Bus模式时，监听只能在组件创建之后才能实现，如果组件没有创建就需要监听，Bus模式就无能为力了。</p>\n<h2 id=\"临时数据\"><a href=\"#临时数据\" class=\"headerlink\" title=\"临时数据\"></a>临时数据</h2><p>虽然需要存储，但是又不立刻使用，关闭了浏览器就没用的数据。可以通过store模式，或者VueX，HTML5的sessionLocalStorage实现。</p>\n<h3 id=\"1-store模式\"><a href=\"#1-store模式\" class=\"headerlink\" title=\"1.store模式\"></a>1.store模式</h3><p>store模式正是VueX的原理所在，官网的说法是一般复杂度的网站，最好不要使用VueX，store就行了。VueX就像眼镜：您自会知道什么时候需要它。<br><a href=\"https://vuex.vuejs.org/zh/\" target=\"_blank\" rel=\"noopener\">官网说明</a><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">store模式的实现</span><br><span class=\"line\">创建store.js</span><br><span class=\"line\">let store = &#123;</span><br><span class=\"line\">    debug: true,</span><br><span class=\"line\">    state: &#123;</span><br><span class=\"line\">        message: &apos;Hello!&apos;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    setMessageAction(newValue) &#123;</span><br><span class=\"line\">        if (this.debug) console.log(&apos;setMessageAction triggered with:&apos;, newValue)</span><br><span class=\"line\">        this.state.message = newValue</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    clearMessageAction() &#123;</span><br><span class=\"line\">        if (this.debug) console.log(&apos;clearMessageAction triggered&apos;)</span><br><span class=\"line\">        this.state.message = &apos;&apos;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export &#123;store as Storage&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">PS:为了避免与VueX的store混淆，我起了storage.js的名字，并且在使用中，用storage来代替store。</span><br><span class=\"line\"></span><br><span class=\"line\">使用：</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    import &#123;Storage&#125; from &apos;../js/storage&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">    export default &#123;</span><br><span class=\"line\">        name: &quot;Demo&quot;,</span><br><span class=\"line\">        data() &#123;</span><br><span class=\"line\">            return &#123;</span><br><span class=\"line\">                sharedState: Storage.state</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        created() &#123;</span><br><span class=\"line\">            Storage.setMessageAction(&quot;this is store mode&quot;)      //设置message的值</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        mounted() &#123;</span><br><span class=\"line\">            console.log(this.sharedState.message)               //获取message的值</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2-sessionLocalStorage\"><a href=\"#2-sessionLocalStorage\" class=\"headerlink\" title=\"2.sessionLocalStorage\"></a>2.sessionLocalStorage</h3><p>此篇博客主要讲VUE的知识，这里只提供思路，关于sessionLocalStorage的知识，请<a href=\"http://www.baidu.com\" target=\"_blank\" rel=\"noopener\">百度</a></p>\n<h2 id=\"永久数据\"><a href=\"#永久数据\" class=\"headerlink\" title=\"永久数据\"></a>永久数据</h2><p>比如说用户选择的主题，喜好设置等。少量的数据，可以放在HTML5的localStorage中。如果数据量比较大，可以放在indexDB中。<br>这个很好玩，期望规范早日落实，下次拿出indexDB，单开一篇博客，这里不多讲了。</p>"}],"PostAsset":[],"PostCategory":[{"post_id":"cjmqc02le000b1ouorr28xxbj","category_id":"cjmqc02lg000c1ouo7gtb8une","_id":"cjmqc02lh000f1ouojcu7y5xo"},{"post_id":"cjmqc02ko00001ouo3q71kyhs","category_id":"cjmqc2m09000g1ouo0ihhjjzp","_id":"cjmqc2m0d000j1ouoa3st5jkw"},{"post_id":"cjmqc6729000n1ouowafrx2pf","category_id":"cjmqc02kx00031ouoey6t949h","_id":"cjmqc672c000p1ouoopxse4av"}],"PostTag":[{"post_id":"cjmqc02le000b1ouorr28xxbj","tag_id":"cjmqc02lg000d1ouogj1mzto8","_id":"cjmqc02lg000e1ouo1o22kcdl"},{"post_id":"cjmqc02ko00001ouo3q71kyhs","tag_id":"cjmqc2m0a000h1ouo5aw6dpig","_id":"cjmqc2m0d000k1ouoouvvy6u5"},{"post_id":"cjmqc02ko00001ouo3q71kyhs","tag_id":"cjmqc02lg000d1ouogj1mzto8","_id":"cjmqc2m0e000l1ouoa30g7uza"},{"post_id":"cjmqc02ko00001ouo3q71kyhs","tag_id":"cjmqc2m0c000i1ouo8bwydkal","_id":"cjmqc2m0e000m1ouopc9qz6dp"},{"post_id":"cjmqc6729000n1ouowafrx2pf","tag_id":"cjmqc672c000o1ouom9zod3ij","_id":"cjmqc672d000q1ouoilas789r"},{"post_id":"cjmqc6729000n1ouowafrx2pf","tag_id":"cjmqc02kz00041ouo6nk20jya","_id":"cjmqc672e000r1ouo91v416rn"},{"post_id":"cjmqc6729000n1ouowafrx2pf","tag_id":"cjmqc02l000051ouonasomb93","_id":"cjmqc672e000s1ouosmyiebil"},{"post_id":"cjmqc6729000n1ouowafrx2pf","tag_id":"cjmqc02l100071ouokcs8xnfq","_id":"cjmqc672e000t1ouob5k5dqy4"}],"Tag":[{"name":"传值","_id":"cjmqc02kz00041ouo6nk20jya"},{"name":"通信","_id":"cjmqc02l000051ouonasomb93"},{"name":"共享数据","_id":"cjmqc02l100071ouokcs8xnfq"},{"name":"blog","_id":"cjmqc02lg000d1ouogj1mzto8"},{"name":"hexo","_id":"cjmqc2m0a000h1ouo5aw6dpig"},{"name":"免费","_id":"cjmqc2m0c000i1ouo8bwydkal"},{"name":"VUE","_id":"cjmqc672c000o1ouom9zod3ij"}]}}